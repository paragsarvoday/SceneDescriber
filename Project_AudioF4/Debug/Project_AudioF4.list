
Project_AudioF4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057cc  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005978  08005978  00006978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005990  08005990  0002e05c  2**0
                  CONTENTS
  4 .ARM          00000008  08005990  08005990  00006990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005998  08005998  0002e05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005998  08005998  00006998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800599c  0800599c  0000699c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0002705c  20000000  080059a0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002e05c  2**0
                  CONTENTS
 10 .bss          00000860  2002705c  2002705c  0002e05c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200278bc  200278bc  0002e05c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002e05c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001628c  00000000  00000000  0002e08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bdf  00000000  00000000  00044318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001340  00000000  00000000  00046ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f16  00000000  00000000  00048238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025c0c  00000000  00000000  0004914e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016d7f  00000000  00000000  0006ed5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5f0c  00000000  00000000  00085ad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016b9e5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005308  00000000  00000000  0016ba28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00170d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2002705c 	.word	0x2002705c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005960 	.word	0x08005960

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20027060 	.word	0x20027060
 80001e8:	08005960 	.word	0x08005960

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <HAL_TIM_PeriodElapsedCallback>:
int loop_var = 0;
size_t length = sizeof(helloworld) / sizeof(uint16_t);


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	if(loop_var <= length){
 80004e4:	4b13      	ldr	r3, [pc, #76]	@ (8000534 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	461a      	mov	r2, r3
 80004ea:	4b13      	ldr	r3, [pc, #76]	@ (8000538 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	429a      	cmp	r2, r3
 80004f0:	d816      	bhi.n	8000520 <HAL_TIM_PeriodElapsedCallback+0x44>

	if(htim->Instance == TIM2)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80004fa:	d111      	bne.n	8000520 <HAL_TIM_PeriodElapsedCallback+0x44>
  {
//    txData = ((uint16_t)helloworld[txIndex+1] << 8) | helloworld[txIndex];
	  txData = helloworld[txIndex];
 80004fc:	4b0f      	ldr	r3, [pc, #60]	@ (800053c <HAL_TIM_PeriodElapsedCallback+0x60>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a0f      	ldr	r2, [pc, #60]	@ (8000540 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000502:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000506:	4b0f      	ldr	r3, [pc, #60]	@ (8000544 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000508:	801a      	strh	r2, [r3, #0]
//    txIndex = txIndex + 2;
	  txIndex = txIndex + 1;
 800050a:	4b0c      	ldr	r3, [pc, #48]	@ (800053c <HAL_TIM_PeriodElapsedCallback+0x60>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	3301      	adds	r3, #1
 8000510:	4a0a      	ldr	r2, [pc, #40]	@ (800053c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000512:	6013      	str	r3, [r2, #0]
//    if(txIndex>length) txIndex = 0;
    HAL_I2S_Transmit(&hi2s2, &txData, 1, 10);
 8000514:	230a      	movs	r3, #10
 8000516:	2201      	movs	r2, #1
 8000518:	490a      	ldr	r1, [pc, #40]	@ (8000544 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800051a:	480b      	ldr	r0, [pc, #44]	@ (8000548 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800051c:	f001 ff12 	bl	8002344 <HAL_I2S_Transmit>
  }
	}
	loop_var++;
 8000520:	4b04      	ldr	r3, [pc, #16]	@ (8000534 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	3301      	adds	r3, #1
 8000526:	4a03      	ldr	r2, [pc, #12]	@ (8000534 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000528:	6013      	str	r3, [r2, #0]
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	200278ac 	.word	0x200278ac
 8000538:	2002704c 	.word	0x2002704c
 800053c:	200278a8 	.word	0x200278a8
 8000540:	20000000 	.word	0x20000000
 8000544:	200278a4 	.word	0x200278a4
 8000548:	200272a0 	.word	0x200272a0

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000550:	f000 fe50 	bl	80011f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000554:	f000 f86c 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000558:	f000 fa1e 	bl	8000998 <MX_GPIO_Init>
  MX_ETH_Init();
 800055c:	f000 f8d2 	bl	8000704 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000560:	f000 f9c2 	bl	80008e8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000564:	f000 f9ea 	bl	800093c <MX_USB_OTG_FS_PCD_Init>
  MX_I2S2_Init();
 8000568:	f000 f91a 	bl	80007a0 <MX_I2S2_Init>
  MX_TIM2_Init();
 800056c:	f000 f946 	bl	80007fc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000570:	f000 f990 	bl	8000894 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  txIndex = 0;
 8000574:	4b28      	ldr	r3, [pc, #160]	@ (8000618 <main+0xcc>)
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim2);
 800057a:	4828      	ldr	r0, [pc, #160]	@ (800061c <main+0xd0>)
 800057c:	f003 fb80 	bl	8003c80 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1){
 8000580:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000584:	4826      	ldr	r0, [pc, #152]	@ (8000620 <main+0xd4>)
 8000586:	f001 fd6b 	bl	8002060 <HAL_GPIO_ReadPin>
 800058a:	4603      	mov	r3, r0
 800058c:	2b01      	cmp	r3, #1
 800058e:	d119      	bne.n	80005c4 <main+0x78>
	 	 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000596:	4823      	ldr	r0, [pc, #140]	@ (8000624 <main+0xd8>)
 8000598:	f001 fd7a 	bl	8002090 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(GPIOB, LD1_Pin, 1);
 800059c:	2201      	movs	r2, #1
 800059e:	2101      	movs	r1, #1
 80005a0:	4821      	ldr	r0, [pc, #132]	@ (8000628 <main+0xdc>)
 80005a2:	f001 fd75 	bl	8002090 <HAL_GPIO_WritePin>
	 	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 80005a6:	2201      	movs	r2, #1
 80005a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005ac:	481f      	ldr	r0, [pc, #124]	@ (800062c <main+0xe0>)
 80005ae:	f001 fd6f 	bl	8002090 <HAL_GPIO_WritePin>
	 	HAL_GPIO_WritePin(GPIOB, LD2_Pin, 1);
 80005b2:	2201      	movs	r2, #1
 80005b4:	2180      	movs	r1, #128	@ 0x80
 80005b6:	481c      	ldr	r0, [pc, #112]	@ (8000628 <main+0xdc>)
 80005b8:	f001 fd6a 	bl	8002090 <HAL_GPIO_WritePin>
	 	 HAL_Delay(1000);
 80005bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005c0:	f000 fe8a 	bl	80012d8 <HAL_Delay>
	  }
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005ca:	4816      	ldr	r0, [pc, #88]	@ (8000624 <main+0xd8>)
 80005cc:	f001 fd60 	bl	8002090 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, LD1_Pin, 0);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2101      	movs	r1, #1
 80005d4:	4814      	ldr	r0, [pc, #80]	@ (8000628 <main+0xdc>)
 80005d6:	f001 fd5b 	bl	8002090 <HAL_GPIO_WritePin>
	 if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == 1 ){
 80005da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005de:	4812      	ldr	r0, [pc, #72]	@ (8000628 <main+0xdc>)
 80005e0:	f001 fd3e 	bl	8002060 <HAL_GPIO_ReadPin>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d1ca      	bne.n	8000580 <main+0x34>
		 HAL_Delay(75);
 80005ea:	204b      	movs	r0, #75	@ 0x4b
 80005ec:	f000 fe74 	bl	80012d8 <HAL_Delay>
		 if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == 1 ){
 80005f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005f4:	480c      	ldr	r0, [pc, #48]	@ (8000628 <main+0xdc>)
 80005f6:	f001 fd33 	bl	8002060 <HAL_GPIO_ReadPin>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d1bf      	bne.n	8000580 <main+0x34>
		 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 8000600:	2200      	movs	r2, #0
 8000602:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000606:	4809      	ldr	r0, [pc, #36]	@ (800062c <main+0xe0>)
 8000608:	f001 fd42 	bl	8002090 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, LD2_Pin, 0);
 800060c:	2200      	movs	r2, #0
 800060e:	2180      	movs	r1, #128	@ 0x80
 8000610:	4805      	ldr	r0, [pc, #20]	@ (8000628 <main+0xdc>)
 8000612:	f001 fd3d 	bl	8002090 <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1){
 8000616:	e7b3      	b.n	8000580 <main+0x34>
 8000618:	200278a8 	.word	0x200278a8
 800061c:	200272e8 	.word	0x200272e8
 8000620:	40020800 	.word	0x40020800
 8000624:	40021400 	.word	0x40021400
 8000628:	40020400 	.word	0x40020400
 800062c:	40021000 	.word	0x40021000

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	@ 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	2230      	movs	r2, #48	@ 0x30
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f005 f961 	bl	8005906 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	4b28      	ldr	r3, [pc, #160]	@ (80006fc <SystemClock_Config+0xcc>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800065c:	4a27      	ldr	r2, [pc, #156]	@ (80006fc <SystemClock_Config+0xcc>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	@ 0x40
 8000664:	4b25      	ldr	r3, [pc, #148]	@ (80006fc <SystemClock_Config+0xcc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	4b22      	ldr	r3, [pc, #136]	@ (8000700 <SystemClock_Config+0xd0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a21      	ldr	r2, [pc, #132]	@ (8000700 <SystemClock_Config+0xd0>)
 800067a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b1f      	ldr	r3, [pc, #124]	@ (8000700 <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068c:	2301      	movs	r3, #1
 800068e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000690:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000694:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800069e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a0:	2304      	movs	r3, #4
 80006a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006a4:	23a8      	movs	r3, #168	@ 0xa8
 80006a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ac:	2307      	movs	r3, #7
 80006ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 fbdb 	bl	8002e70 <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c0:	f000 fa6e 	bl	8000ba0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c8:	2302      	movs	r3, #2
 80006ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2105      	movs	r1, #5
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 fe3c 	bl	8003360 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ee:	f000 fa57 	bl	8000ba0 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3750      	adds	r7, #80	@ 0x50
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000708:	4b1f      	ldr	r3, [pc, #124]	@ (8000788 <MX_ETH_Init+0x84>)
 800070a:	4a20      	ldr	r2, [pc, #128]	@ (800078c <MX_ETH_Init+0x88>)
 800070c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800070e:	4b20      	ldr	r3, [pc, #128]	@ (8000790 <MX_ETH_Init+0x8c>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000714:	4b1e      	ldr	r3, [pc, #120]	@ (8000790 <MX_ETH_Init+0x8c>)
 8000716:	2280      	movs	r2, #128	@ 0x80
 8000718:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800071a:	4b1d      	ldr	r3, [pc, #116]	@ (8000790 <MX_ETH_Init+0x8c>)
 800071c:	22e1      	movs	r2, #225	@ 0xe1
 800071e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000720:	4b1b      	ldr	r3, [pc, #108]	@ (8000790 <MX_ETH_Init+0x8c>)
 8000722:	2200      	movs	r2, #0
 8000724:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000726:	4b1a      	ldr	r3, [pc, #104]	@ (8000790 <MX_ETH_Init+0x8c>)
 8000728:	2200      	movs	r2, #0
 800072a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800072c:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <MX_ETH_Init+0x8c>)
 800072e:	2200      	movs	r2, #0
 8000730:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000732:	4b15      	ldr	r3, [pc, #84]	@ (8000788 <MX_ETH_Init+0x84>)
 8000734:	4a16      	ldr	r2, [pc, #88]	@ (8000790 <MX_ETH_Init+0x8c>)
 8000736:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000738:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <MX_ETH_Init+0x84>)
 800073a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800073e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000740:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <MX_ETH_Init+0x84>)
 8000742:	4a14      	ldr	r2, [pc, #80]	@ (8000794 <MX_ETH_Init+0x90>)
 8000744:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000746:	4b10      	ldr	r3, [pc, #64]	@ (8000788 <MX_ETH_Init+0x84>)
 8000748:	4a13      	ldr	r2, [pc, #76]	@ (8000798 <MX_ETH_Init+0x94>)
 800074a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800074c:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <MX_ETH_Init+0x84>)
 800074e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000752:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000754:	480c      	ldr	r0, [pc, #48]	@ (8000788 <MX_ETH_Init+0x84>)
 8000756:	f000 ff87 	bl	8001668 <HAL_ETH_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000760:	f000 fa1e 	bl	8000ba0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000764:	2238      	movs	r2, #56	@ 0x38
 8000766:	2100      	movs	r1, #0
 8000768:	480c      	ldr	r0, [pc, #48]	@ (800079c <MX_ETH_Init+0x98>)
 800076a:	f005 f8cc 	bl	8005906 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800076e:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <MX_ETH_Init+0x98>)
 8000770:	2221      	movs	r2, #33	@ 0x21
 8000772:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000774:	4b09      	ldr	r3, [pc, #36]	@ (800079c <MX_ETH_Init+0x98>)
 8000776:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800077a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800077c:	4b07      	ldr	r3, [pc, #28]	@ (800079c <MX_ETH_Init+0x98>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200271f0 	.word	0x200271f0
 800078c:	40028000 	.word	0x40028000
 8000790:	200278b0 	.word	0x200278b0
 8000794:	20027150 	.word	0x20027150
 8000798:	200270b0 	.word	0x200270b0
 800079c:	20027078 	.word	0x20027078

080007a0 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80007a4:	4b13      	ldr	r3, [pc, #76]	@ (80007f4 <MX_I2S2_Init+0x54>)
 80007a6:	4a14      	ldr	r2, [pc, #80]	@ (80007f8 <MX_I2S2_Init+0x58>)
 80007a8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80007aa:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <MX_I2S2_Init+0x54>)
 80007ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007b0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80007b2:	4b10      	ldr	r3, [pc, #64]	@ (80007f4 <MX_I2S2_Init+0x54>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007b8:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <MX_I2S2_Init+0x54>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80007be:	4b0d      	ldr	r3, [pc, #52]	@ (80007f4 <MX_I2S2_Init+0x54>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80007c4:	4b0b      	ldr	r3, [pc, #44]	@ (80007f4 <MX_I2S2_Init+0x54>)
 80007c6:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80007ca:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80007cc:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <MX_I2S2_Init+0x54>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80007d2:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <MX_I2S2_Init+0x54>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007d8:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <MX_I2S2_Init+0x54>)
 80007da:	2200      	movs	r2, #0
 80007dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	@ (80007f4 <MX_I2S2_Init+0x54>)
 80007e0:	f001 fc70 	bl	80020c4 <HAL_I2S_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80007ea:	f000 f9d9 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200272a0 	.word	0x200272a0
 80007f8:	40003800 	.word	0x40003800

080007fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000802:	f107 0308 	add.w	r3, r7, #8
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000810:	463b      	mov	r3, r7
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000818:	4b1d      	ldr	r3, [pc, #116]	@ (8000890 <MX_TIM2_Init+0x94>)
 800081a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800081e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8000820:	4b1b      	ldr	r3, [pc, #108]	@ (8000890 <MX_TIM2_Init+0x94>)
 8000822:	2253      	movs	r2, #83	@ 0x53
 8000824:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000826:	4b1a      	ldr	r3, [pc, #104]	@ (8000890 <MX_TIM2_Init+0x94>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 31;
 800082c:	4b18      	ldr	r3, [pc, #96]	@ (8000890 <MX_TIM2_Init+0x94>)
 800082e:	221f      	movs	r2, #31
 8000830:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000832:	4b17      	ldr	r3, [pc, #92]	@ (8000890 <MX_TIM2_Init+0x94>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000838:	4b15      	ldr	r3, [pc, #84]	@ (8000890 <MX_TIM2_Init+0x94>)
 800083a:	2200      	movs	r2, #0
 800083c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800083e:	4814      	ldr	r0, [pc, #80]	@ (8000890 <MX_TIM2_Init+0x94>)
 8000840:	f003 f9ce 	bl	8003be0 <HAL_TIM_Base_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800084a:	f000 f9a9 	bl	8000ba0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800084e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000852:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000854:	f107 0308 	add.w	r3, r7, #8
 8000858:	4619      	mov	r1, r3
 800085a:	480d      	ldr	r0, [pc, #52]	@ (8000890 <MX_TIM2_Init+0x94>)
 800085c:	f003 fb70 	bl	8003f40 <HAL_TIM_ConfigClockSource>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000866:	f000 f99b 	bl	8000ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800086a:	2300      	movs	r3, #0
 800086c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000872:	463b      	mov	r3, r7
 8000874:	4619      	mov	r1, r3
 8000876:	4806      	ldr	r0, [pc, #24]	@ (8000890 <MX_TIM2_Init+0x94>)
 8000878:	f003 fd98 	bl	80043ac <HAL_TIMEx_MasterConfigSynchronization>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000882:	f000 f98d 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	3718      	adds	r7, #24
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200272e8 	.word	0x200272e8

08000894 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000898:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <MX_USART2_UART_Init+0x4c>)
 800089a:	4a12      	ldr	r2, [pc, #72]	@ (80008e4 <MX_USART2_UART_Init+0x50>)
 800089c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800089e:	4b10      	ldr	r3, [pc, #64]	@ (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	@ (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	@ (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	@ (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b08      	ldr	r3, [pc, #32]	@ (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	@ (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008cc:	f003 fdfe 	bl	80044cc <HAL_UART_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008d6:	f000 f963 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20027330 	.word	0x20027330
 80008e4:	40004400 	.word	0x40004400

080008e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008ec:	4b11      	ldr	r3, [pc, #68]	@ (8000934 <MX_USART3_UART_Init+0x4c>)
 80008ee:	4a12      	ldr	r2, [pc, #72]	@ (8000938 <MX_USART3_UART_Init+0x50>)
 80008f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008f2:	4b10      	ldr	r3, [pc, #64]	@ (8000934 <MX_USART3_UART_Init+0x4c>)
 80008f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000934 <MX_USART3_UART_Init+0x4c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000900:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <MX_USART3_UART_Init+0x4c>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000906:	4b0b      	ldr	r3, [pc, #44]	@ (8000934 <MX_USART3_UART_Init+0x4c>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800090c:	4b09      	ldr	r3, [pc, #36]	@ (8000934 <MX_USART3_UART_Init+0x4c>)
 800090e:	220c      	movs	r2, #12
 8000910:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000912:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <MX_USART3_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000918:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <MX_USART3_UART_Init+0x4c>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800091e:	4805      	ldr	r0, [pc, #20]	@ (8000934 <MX_USART3_UART_Init+0x4c>)
 8000920:	f003 fdd4 	bl	80044cc <HAL_UART_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800092a:	f000 f939 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20027378 	.word	0x20027378
 8000938:	40004800 	.word	0x40004800

0800093c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000940:	4b14      	ldr	r3, [pc, #80]	@ (8000994 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000942:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000946:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000948:	4b12      	ldr	r3, [pc, #72]	@ (8000994 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094a:	2204      	movs	r2, #4
 800094c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800094e:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000950:	2202      	movs	r2, #2
 8000952:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000954:	4b0f      	ldr	r3, [pc, #60]	@ (8000994 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000956:	2200      	movs	r2, #0
 8000958:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800095a:	4b0e      	ldr	r3, [pc, #56]	@ (8000994 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095c:	2202      	movs	r2, #2
 800095e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000960:	4b0c      	ldr	r3, [pc, #48]	@ (8000994 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000962:	2201      	movs	r2, #1
 8000964:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000966:	4b0b      	ldr	r3, [pc, #44]	@ (8000994 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800096c:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000972:	4b08      	ldr	r3, [pc, #32]	@ (8000994 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000974:	2201      	movs	r2, #1
 8000976:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000978:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097a:	2200      	movs	r2, #0
 800097c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800097e:	4805      	ldr	r0, [pc, #20]	@ (8000994 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000980:	f002 f966 	bl	8002c50 <HAL_PCD_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800098a:	f000 f909 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	200273c0 	.word	0x200273c0

08000998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08e      	sub	sp, #56	@ 0x38
 800099c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	623b      	str	r3, [r7, #32]
 80009b2:	4b75      	ldr	r3, [pc, #468]	@ (8000b88 <MX_GPIO_Init+0x1f0>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	4a74      	ldr	r2, [pc, #464]	@ (8000b88 <MX_GPIO_Init+0x1f0>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009be:	4b72      	ldr	r3, [pc, #456]	@ (8000b88 <MX_GPIO_Init+0x1f0>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	623b      	str	r3, [r7, #32]
 80009c8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	61fb      	str	r3, [r7, #28]
 80009ce:	4b6e      	ldr	r3, [pc, #440]	@ (8000b88 <MX_GPIO_Init+0x1f0>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	4a6d      	ldr	r2, [pc, #436]	@ (8000b88 <MX_GPIO_Init+0x1f0>)
 80009d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009da:	4b6b      	ldr	r3, [pc, #428]	@ (8000b88 <MX_GPIO_Init+0x1f0>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009e2:	61fb      	str	r3, [r7, #28]
 80009e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	61bb      	str	r3, [r7, #24]
 80009ea:	4b67      	ldr	r3, [pc, #412]	@ (8000b88 <MX_GPIO_Init+0x1f0>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	4a66      	ldr	r2, [pc, #408]	@ (8000b88 <MX_GPIO_Init+0x1f0>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f6:	4b64      	ldr	r3, [pc, #400]	@ (8000b88 <MX_GPIO_Init+0x1f0>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	61bb      	str	r3, [r7, #24]
 8000a00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
 8000a06:	4b60      	ldr	r3, [pc, #384]	@ (8000b88 <MX_GPIO_Init+0x1f0>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	4a5f      	ldr	r2, [pc, #380]	@ (8000b88 <MX_GPIO_Init+0x1f0>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a12:	4b5d      	ldr	r3, [pc, #372]	@ (8000b88 <MX_GPIO_Init+0x1f0>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	f003 0302 	and.w	r3, r3, #2
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	4b59      	ldr	r3, [pc, #356]	@ (8000b88 <MX_GPIO_Init+0x1f0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	4a58      	ldr	r2, [pc, #352]	@ (8000b88 <MX_GPIO_Init+0x1f0>)
 8000a28:	f043 0320 	orr.w	r3, r3, #32
 8000a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2e:	4b56      	ldr	r3, [pc, #344]	@ (8000b88 <MX_GPIO_Init+0x1f0>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	f003 0320 	and.w	r3, r3, #32
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	4b52      	ldr	r3, [pc, #328]	@ (8000b88 <MX_GPIO_Init+0x1f0>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	4a51      	ldr	r2, [pc, #324]	@ (8000b88 <MX_GPIO_Init+0x1f0>)
 8000a44:	f043 0310 	orr.w	r3, r3, #16
 8000a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4a:	4b4f      	ldr	r3, [pc, #316]	@ (8000b88 <MX_GPIO_Init+0x1f0>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	f003 0310 	and.w	r3, r3, #16
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	4b4b      	ldr	r3, [pc, #300]	@ (8000b88 <MX_GPIO_Init+0x1f0>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a4a      	ldr	r2, [pc, #296]	@ (8000b88 <MX_GPIO_Init+0x1f0>)
 8000a60:	f043 0308 	orr.w	r3, r3, #8
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a66:	4b48      	ldr	r3, [pc, #288]	@ (8000b88 <MX_GPIO_Init+0x1f0>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0308 	and.w	r3, r3, #8
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	4b44      	ldr	r3, [pc, #272]	@ (8000b88 <MX_GPIO_Init+0x1f0>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	4a43      	ldr	r2, [pc, #268]	@ (8000b88 <MX_GPIO_Init+0x1f0>)
 8000a7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a82:	4b41      	ldr	r3, [pc, #260]	@ (8000b88 <MX_GPIO_Init+0x1f0>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000a94:	483d      	ldr	r0, [pc, #244]	@ (8000b8c <MX_GPIO_Init+0x1f4>)
 8000a96:	f001 fafb 	bl	8002090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aa0:	483b      	ldr	r0, [pc, #236]	@ (8000b90 <MX_GPIO_Init+0x1f8>)
 8000aa2:	f001 faf5 	bl	8002090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000aac:	4839      	ldr	r0, [pc, #228]	@ (8000b94 <MX_GPIO_Init+0x1fc>)
 8000aae:	f001 faef 	bl	8002090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2140      	movs	r1, #64	@ 0x40
 8000ab6:	4838      	ldr	r0, [pc, #224]	@ (8000b98 <MX_GPIO_Init+0x200>)
 8000ab8:	f001 faea 	bl	8002090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000abc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ac2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4832      	ldr	r0, [pc, #200]	@ (8000b9c <MX_GPIO_Init+0x204>)
 8000ad4:	f001 f918 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ad8:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000adc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aee:	4619      	mov	r1, r3
 8000af0:	4826      	ldr	r0, [pc, #152]	@ (8000b8c <MX_GPIO_Init+0x1f4>)
 8000af2:	f001 f909 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000af6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000afa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4820      	ldr	r0, [pc, #128]	@ (8000b90 <MX_GPIO_Init+0x1f8>)
 8000b10:	f001 f8fa 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4819      	ldr	r0, [pc, #100]	@ (8000b94 <MX_GPIO_Init+0x1fc>)
 8000b2e:	f001 f8eb 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b32:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b44:	4619      	mov	r1, r3
 8000b46:	4811      	ldr	r0, [pc, #68]	@ (8000b8c <MX_GPIO_Init+0x1f4>)
 8000b48:	f001 f8de 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b4c:	2340      	movs	r3, #64	@ 0x40
 8000b4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b60:	4619      	mov	r1, r3
 8000b62:	480d      	ldr	r0, [pc, #52]	@ (8000b98 <MX_GPIO_Init+0x200>)
 8000b64:	f001 f8d0 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b68:	2380      	movs	r3, #128	@ 0x80
 8000b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4807      	ldr	r0, [pc, #28]	@ (8000b98 <MX_GPIO_Init+0x200>)
 8000b7c:	f001 f8c4 	bl	8001d08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b80:	bf00      	nop
 8000b82:	3738      	adds	r7, #56	@ 0x38
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020400 	.word	0x40020400
 8000b90:	40021400 	.word	0x40021400
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40021800 	.word	0x40021800
 8000b9c:	40020800 	.word	0x40020800

08000ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba4:	b672      	cpsid	i
}
 8000ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <Error_Handler+0x8>

08000bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	4b10      	ldr	r3, [pc, #64]	@ (8000bf8 <HAL_MspInit+0x4c>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bba:	4a0f      	ldr	r2, [pc, #60]	@ (8000bf8 <HAL_MspInit+0x4c>)
 8000bbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf8 <HAL_MspInit+0x4c>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	4b09      	ldr	r3, [pc, #36]	@ (8000bf8 <HAL_MspInit+0x4c>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd6:	4a08      	ldr	r2, [pc, #32]	@ (8000bf8 <HAL_MspInit+0x4c>)
 8000bd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bde:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <HAL_MspInit+0x4c>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800

08000bfc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08e      	sub	sp, #56	@ 0x38
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a55      	ldr	r2, [pc, #340]	@ (8000d70 <HAL_ETH_MspInit+0x174>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	f040 80a4 	bne.w	8000d68 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000c20:	2300      	movs	r3, #0
 8000c22:	623b      	str	r3, [r7, #32]
 8000c24:	4b53      	ldr	r3, [pc, #332]	@ (8000d74 <HAL_ETH_MspInit+0x178>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c28:	4a52      	ldr	r2, [pc, #328]	@ (8000d74 <HAL_ETH_MspInit+0x178>)
 8000c2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c30:	4b50      	ldr	r3, [pc, #320]	@ (8000d74 <HAL_ETH_MspInit+0x178>)
 8000c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c38:	623b      	str	r3, [r7, #32]
 8000c3a:	6a3b      	ldr	r3, [r7, #32]
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
 8000c40:	4b4c      	ldr	r3, [pc, #304]	@ (8000d74 <HAL_ETH_MspInit+0x178>)
 8000c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c44:	4a4b      	ldr	r2, [pc, #300]	@ (8000d74 <HAL_ETH_MspInit+0x178>)
 8000c46:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000c4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4c:	4b49      	ldr	r3, [pc, #292]	@ (8000d74 <HAL_ETH_MspInit+0x178>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000c54:	61fb      	str	r3, [r7, #28]
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61bb      	str	r3, [r7, #24]
 8000c5c:	4b45      	ldr	r3, [pc, #276]	@ (8000d74 <HAL_ETH_MspInit+0x178>)
 8000c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c60:	4a44      	ldr	r2, [pc, #272]	@ (8000d74 <HAL_ETH_MspInit+0x178>)
 8000c62:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000c66:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c68:	4b42      	ldr	r3, [pc, #264]	@ (8000d74 <HAL_ETH_MspInit+0x178>)
 8000c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000c70:	61bb      	str	r3, [r7, #24]
 8000c72:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	4b3e      	ldr	r3, [pc, #248]	@ (8000d74 <HAL_ETH_MspInit+0x178>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7c:	4a3d      	ldr	r2, [pc, #244]	@ (8000d74 <HAL_ETH_MspInit+0x178>)
 8000c7e:	f043 0304 	orr.w	r3, r3, #4
 8000c82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c84:	4b3b      	ldr	r3, [pc, #236]	@ (8000d74 <HAL_ETH_MspInit+0x178>)
 8000c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c88:	f003 0304 	and.w	r3, r3, #4
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c90:	2300      	movs	r3, #0
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	4b37      	ldr	r3, [pc, #220]	@ (8000d74 <HAL_ETH_MspInit+0x178>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c98:	4a36      	ldr	r2, [pc, #216]	@ (8000d74 <HAL_ETH_MspInit+0x178>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca0:	4b34      	ldr	r3, [pc, #208]	@ (8000d74 <HAL_ETH_MspInit+0x178>)
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cac:	2300      	movs	r3, #0
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	4b30      	ldr	r3, [pc, #192]	@ (8000d74 <HAL_ETH_MspInit+0x178>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb4:	4a2f      	ldr	r2, [pc, #188]	@ (8000d74 <HAL_ETH_MspInit+0x178>)
 8000cb6:	f043 0302 	orr.w	r3, r3, #2
 8000cba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cbc:	4b2d      	ldr	r3, [pc, #180]	@ (8000d74 <HAL_ETH_MspInit+0x178>)
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc0:	f003 0302 	and.w	r3, r3, #2
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	4b29      	ldr	r3, [pc, #164]	@ (8000d74 <HAL_ETH_MspInit+0x178>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd0:	4a28      	ldr	r2, [pc, #160]	@ (8000d74 <HAL_ETH_MspInit+0x178>)
 8000cd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd8:	4b26      	ldr	r3, [pc, #152]	@ (8000d74 <HAL_ETH_MspInit+0x178>)
 8000cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ce4:	2332      	movs	r3, #50	@ 0x32
 8000ce6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cf4:	230b      	movs	r3, #11
 8000cf6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	481e      	ldr	r0, [pc, #120]	@ (8000d78 <HAL_ETH_MspInit+0x17c>)
 8000d00:	f001 f802 	bl	8001d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d04:	2386      	movs	r3, #134	@ 0x86
 8000d06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d14:	230b      	movs	r3, #11
 8000d16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4817      	ldr	r0, [pc, #92]	@ (8000d7c <HAL_ETH_MspInit+0x180>)
 8000d20:	f000 fff2 	bl	8001d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d32:	2303      	movs	r3, #3
 8000d34:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d36:	230b      	movs	r3, #11
 8000d38:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d3e:	4619      	mov	r1, r3
 8000d40:	480f      	ldr	r0, [pc, #60]	@ (8000d80 <HAL_ETH_MspInit+0x184>)
 8000d42:	f000 ffe1 	bl	8001d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d46:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000d4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d54:	2303      	movs	r3, #3
 8000d56:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d58:	230b      	movs	r3, #11
 8000d5a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d60:	4619      	mov	r1, r3
 8000d62:	4808      	ldr	r0, [pc, #32]	@ (8000d84 <HAL_ETH_MspInit+0x188>)
 8000d64:	f000 ffd0 	bl	8001d08 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000d68:	bf00      	nop
 8000d6a:	3738      	adds	r7, #56	@ 0x38
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40028000 	.word	0x40028000
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40020800 	.word	0x40020800
 8000d7c:	40020000 	.word	0x40020000
 8000d80:	40020400 	.word	0x40020400
 8000d84:	40021800 	.word	0x40021800

08000d88 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b096      	sub	sp, #88	@ 0x58
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	2230      	movs	r2, #48	@ 0x30
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f004 fdac 	bl	8005906 <memset>
  if(hi2s->Instance==SPI2)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a31      	ldr	r2, [pc, #196]	@ (8000e78 <HAL_I2S_MspInit+0xf0>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d15a      	bne.n	8000e6e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000db8:	2301      	movs	r3, #1
 8000dba:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000dbc:	23c0      	movs	r3, #192	@ 0xc0
 8000dbe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f002 fce9 	bl	80037a0 <HAL_RCCEx_PeriphCLKConfig>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000dd4:	f7ff fee4 	bl	8000ba0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000dd8:	2300      	movs	r3, #0
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	4b27      	ldr	r3, [pc, #156]	@ (8000e7c <HAL_I2S_MspInit+0xf4>)
 8000dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de0:	4a26      	ldr	r2, [pc, #152]	@ (8000e7c <HAL_I2S_MspInit+0xf4>)
 8000de2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000de6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de8:	4b24      	ldr	r3, [pc, #144]	@ (8000e7c <HAL_I2S_MspInit+0xf4>)
 8000dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	4b20      	ldr	r3, [pc, #128]	@ (8000e7c <HAL_I2S_MspInit+0xf4>)
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfc:	4a1f      	ldr	r2, [pc, #124]	@ (8000e7c <HAL_I2S_MspInit+0xf4>)
 8000dfe:	f043 0304 	orr.w	r3, r3, #4
 8000e02:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e04:	4b1d      	ldr	r3, [pc, #116]	@ (8000e7c <HAL_I2S_MspInit+0xf4>)
 8000e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e08:	f003 0304 	and.w	r3, r3, #4
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e10:	2300      	movs	r3, #0
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	4b19      	ldr	r3, [pc, #100]	@ (8000e7c <HAL_I2S_MspInit+0xf4>)
 8000e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e18:	4a18      	ldr	r2, [pc, #96]	@ (8000e7c <HAL_I2S_MspInit+0xf4>)
 8000e1a:	f043 0302 	orr.w	r3, r3, #2
 8000e1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e20:	4b16      	ldr	r3, [pc, #88]	@ (8000e7c <HAL_I2S_MspInit+0xf4>)
 8000e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e24:	f003 0302 	and.w	r3, r3, #2
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e2c:	2308      	movs	r3, #8
 8000e2e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e3c:	2305      	movs	r3, #5
 8000e3e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e40:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000e44:	4619      	mov	r1, r3
 8000e46:	480e      	ldr	r0, [pc, #56]	@ (8000e80 <HAL_I2S_MspInit+0xf8>)
 8000e48:	f000 ff5e 	bl	8001d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000e4c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e50:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e5e:	2305      	movs	r3, #5
 8000e60:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e62:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000e66:	4619      	mov	r1, r3
 8000e68:	4806      	ldr	r0, [pc, #24]	@ (8000e84 <HAL_I2S_MspInit+0xfc>)
 8000e6a:	f000 ff4d 	bl	8001d08 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000e6e:	bf00      	nop
 8000e70:	3758      	adds	r7, #88	@ 0x58
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40003800 	.word	0x40003800
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40020800 	.word	0x40020800
 8000e84:	40020400 	.word	0x40020400

08000e88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e98:	d115      	bne.n	8000ec6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <HAL_TIM_Base_MspInit+0x48>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea2:	4a0b      	ldr	r2, [pc, #44]	@ (8000ed0 <HAL_TIM_Base_MspInit+0x48>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eaa:	4b09      	ldr	r3, [pc, #36]	@ (8000ed0 <HAL_TIM_Base_MspInit+0x48>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2100      	movs	r1, #0
 8000eba:	201c      	movs	r0, #28
 8000ebc:	f000 fb0b 	bl	80014d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ec0:	201c      	movs	r0, #28
 8000ec2:	f000 fb24 	bl	800150e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40023800 	.word	0x40023800

08000ed4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08c      	sub	sp, #48	@ 0x30
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a49      	ldr	r2, [pc, #292]	@ (8001018 <HAL_UART_MspInit+0x144>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d152      	bne.n	8000f9c <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
 8000efa:	4b48      	ldr	r3, [pc, #288]	@ (800101c <HAL_UART_MspInit+0x148>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efe:	4a47      	ldr	r2, [pc, #284]	@ (800101c <HAL_UART_MspInit+0x148>)
 8000f00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f06:	4b45      	ldr	r3, [pc, #276]	@ (800101c <HAL_UART_MspInit+0x148>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f0e:	61bb      	str	r3, [r7, #24]
 8000f10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	4b41      	ldr	r3, [pc, #260]	@ (800101c <HAL_UART_MspInit+0x148>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	4a40      	ldr	r2, [pc, #256]	@ (800101c <HAL_UART_MspInit+0x148>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f22:	4b3e      	ldr	r3, [pc, #248]	@ (800101c <HAL_UART_MspInit+0x148>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	4b3a      	ldr	r3, [pc, #232]	@ (800101c <HAL_UART_MspInit+0x148>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	4a39      	ldr	r2, [pc, #228]	@ (800101c <HAL_UART_MspInit+0x148>)
 8000f38:	f043 0308 	orr.w	r3, r3, #8
 8000f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3e:	4b37      	ldr	r3, [pc, #220]	@ (800101c <HAL_UART_MspInit+0x148>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	f003 0308 	and.w	r3, r3, #8
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f4a:	2308      	movs	r3, #8
 8000f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f56:	2303      	movs	r3, #3
 8000f58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f5a:	2307      	movs	r3, #7
 8000f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	4619      	mov	r1, r3
 8000f64:	482e      	ldr	r0, [pc, #184]	@ (8001020 <HAL_UART_MspInit+0x14c>)
 8000f66:	f000 fecf 	bl	8001d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f6a:	2320      	movs	r3, #32
 8000f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f76:	2303      	movs	r3, #3
 8000f78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f7a:	2307      	movs	r3, #7
 8000f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f7e:	f107 031c 	add.w	r3, r7, #28
 8000f82:	4619      	mov	r1, r3
 8000f84:	4827      	ldr	r0, [pc, #156]	@ (8001024 <HAL_UART_MspInit+0x150>)
 8000f86:	f000 febf 	bl	8001d08 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	2026      	movs	r0, #38	@ 0x26
 8000f90:	f000 faa1 	bl	80014d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f94:	2026      	movs	r0, #38	@ 0x26
 8000f96:	f000 faba 	bl	800150e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f9a:	e039      	b.n	8001010 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a21      	ldr	r2, [pc, #132]	@ (8001028 <HAL_UART_MspInit+0x154>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d134      	bne.n	8001010 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	4b1c      	ldr	r3, [pc, #112]	@ (800101c <HAL_UART_MspInit+0x148>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fae:	4a1b      	ldr	r2, [pc, #108]	@ (800101c <HAL_UART_MspInit+0x148>)
 8000fb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fb6:	4b19      	ldr	r3, [pc, #100]	@ (800101c <HAL_UART_MspInit+0x148>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	4b15      	ldr	r3, [pc, #84]	@ (800101c <HAL_UART_MspInit+0x148>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	4a14      	ldr	r2, [pc, #80]	@ (800101c <HAL_UART_MspInit+0x148>)
 8000fcc:	f043 0308 	orr.w	r3, r3, #8
 8000fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd2:	4b12      	ldr	r3, [pc, #72]	@ (800101c <HAL_UART_MspInit+0x148>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	f003 0308 	and.w	r3, r3, #8
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000fde:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fec:	2303      	movs	r3, #3
 8000fee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ff0:	2307      	movs	r3, #7
 8000ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ff4:	f107 031c 	add.w	r3, r7, #28
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	480a      	ldr	r0, [pc, #40]	@ (8001024 <HAL_UART_MspInit+0x150>)
 8000ffc:	f000 fe84 	bl	8001d08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001000:	2200      	movs	r2, #0
 8001002:	2100      	movs	r1, #0
 8001004:	2027      	movs	r0, #39	@ 0x27
 8001006:	f000 fa66 	bl	80014d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800100a:	2027      	movs	r0, #39	@ 0x27
 800100c:	f000 fa7f 	bl	800150e <HAL_NVIC_EnableIRQ>
}
 8001010:	bf00      	nop
 8001012:	3730      	adds	r7, #48	@ 0x30
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40004400 	.word	0x40004400
 800101c:	40023800 	.word	0x40023800
 8001020:	40020000 	.word	0x40020000
 8001024:	40020c00 	.word	0x40020c00
 8001028:	40004800 	.word	0x40004800

0800102c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	@ 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800104c:	d13f      	bne.n	80010ce <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	4b21      	ldr	r3, [pc, #132]	@ (80010d8 <HAL_PCD_MspInit+0xac>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	4a20      	ldr	r2, [pc, #128]	@ (80010d8 <HAL_PCD_MspInit+0xac>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6313      	str	r3, [r2, #48]	@ 0x30
 800105e:	4b1e      	ldr	r3, [pc, #120]	@ (80010d8 <HAL_PCD_MspInit+0xac>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800106a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800106e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001078:	2303      	movs	r3, #3
 800107a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800107c:	230a      	movs	r3, #10
 800107e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4619      	mov	r1, r3
 8001086:	4815      	ldr	r0, [pc, #84]	@ (80010dc <HAL_PCD_MspInit+0xb0>)
 8001088:	f000 fe3e 	bl	8001d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800108c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	480e      	ldr	r0, [pc, #56]	@ (80010dc <HAL_PCD_MspInit+0xb0>)
 80010a2:	f000 fe31 	bl	8001d08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010a6:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <HAL_PCD_MspInit+0xac>)
 80010a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010aa:	4a0b      	ldr	r2, [pc, #44]	@ (80010d8 <HAL_PCD_MspInit+0xac>)
 80010ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010b0:	6353      	str	r3, [r2, #52]	@ 0x34
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	4b08      	ldr	r3, [pc, #32]	@ (80010d8 <HAL_PCD_MspInit+0xac>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ba:	4a07      	ldr	r2, [pc, #28]	@ (80010d8 <HAL_PCD_MspInit+0xac>)
 80010bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010c2:	4b05      	ldr	r3, [pc, #20]	@ (80010d8 <HAL_PCD_MspInit+0xac>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80010ce:	bf00      	nop
 80010d0:	3728      	adds	r7, #40	@ 0x28
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40020000 	.word	0x40020000

080010e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <NMI_Handler+0x4>

080010e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <HardFault_Handler+0x4>

080010f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <MemManage_Handler+0x4>

080010f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <BusFault_Handler+0x4>

08001100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <UsageFault_Handler+0x4>

08001108 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001136:	f000 f8af 	bl	8001298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001144:	4802      	ldr	r0, [pc, #8]	@ (8001150 <TIM2_IRQHandler+0x10>)
 8001146:	f002 fe0b 	bl	8003d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	200272e8 	.word	0x200272e8

08001154 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001158:	4802      	ldr	r0, [pc, #8]	@ (8001164 <USART2_IRQHandler+0x10>)
 800115a:	f003 fa07 	bl	800456c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20027330 	.word	0x20027330

08001168 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800116c:	4802      	ldr	r0, [pc, #8]	@ (8001178 <USART3_IRQHandler+0x10>)
 800116e:	f003 f9fd 	bl	800456c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20027378 	.word	0x20027378

0800117c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001180:	4b06      	ldr	r3, [pc, #24]	@ (800119c <SystemInit+0x20>)
 8001182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001186:	4a05      	ldr	r2, [pc, #20]	@ (800119c <SystemInit+0x20>)
 8001188:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800118c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011a4:	f7ff ffea 	bl	800117c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011a8:	480c      	ldr	r0, [pc, #48]	@ (80011dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011aa:	490d      	ldr	r1, [pc, #52]	@ (80011e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011ac:	4a0d      	ldr	r2, [pc, #52]	@ (80011e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b0:	e002      	b.n	80011b8 <LoopCopyDataInit>

080011b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b6:	3304      	adds	r3, #4

080011b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011bc:	d3f9      	bcc.n	80011b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011be:	4a0a      	ldr	r2, [pc, #40]	@ (80011e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011c0:	4c0a      	ldr	r4, [pc, #40]	@ (80011ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c4:	e001      	b.n	80011ca <LoopFillZerobss>

080011c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c8:	3204      	adds	r2, #4

080011ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011cc:	d3fb      	bcc.n	80011c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ce:	f004 fba3 	bl	8005918 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011d2:	f7ff f9bb 	bl	800054c <main>
  bx  lr    
 80011d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011d8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80011dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e0:	2002705c 	.word	0x2002705c
  ldr r2, =_sidata
 80011e4:	080059a0 	.word	0x080059a0
  ldr r2, =_sbss
 80011e8:	2002705c 	.word	0x2002705c
  ldr r4, =_ebss
 80011ec:	200278bc 	.word	0x200278bc

080011f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f0:	e7fe      	b.n	80011f0 <ADC_IRQHandler>
	...

080011f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001234 <HAL_Init+0x40>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001234 <HAL_Init+0x40>)
 80011fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001202:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001204:	4b0b      	ldr	r3, [pc, #44]	@ (8001234 <HAL_Init+0x40>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0a      	ldr	r2, [pc, #40]	@ (8001234 <HAL_Init+0x40>)
 800120a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800120e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001210:	4b08      	ldr	r3, [pc, #32]	@ (8001234 <HAL_Init+0x40>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a07      	ldr	r2, [pc, #28]	@ (8001234 <HAL_Init+0x40>)
 8001216:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800121a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121c:	2003      	movs	r0, #3
 800121e:	f000 f94f 	bl	80014c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001222:	2000      	movs	r0, #0
 8001224:	f000 f808 	bl	8001238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001228:	f7ff fcc0 	bl	8000bac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023c00 	.word	0x40023c00

08001238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001240:	4b12      	ldr	r3, [pc, #72]	@ (800128c <HAL_InitTick+0x54>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b12      	ldr	r3, [pc, #72]	@ (8001290 <HAL_InitTick+0x58>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4619      	mov	r1, r3
 800124a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800124e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001252:	fbb2 f3f3 	udiv	r3, r2, r3
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f967 	bl	800152a <HAL_SYSTICK_Config>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e00e      	b.n	8001284 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b0f      	cmp	r3, #15
 800126a:	d80a      	bhi.n	8001282 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800126c:	2200      	movs	r2, #0
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	f04f 30ff 	mov.w	r0, #4294967295
 8001274:	f000 f92f 	bl	80014d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001278:	4a06      	ldr	r2, [pc, #24]	@ (8001294 <HAL_InitTick+0x5c>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	e000      	b.n	8001284 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20027050 	.word	0x20027050
 8001290:	20027058 	.word	0x20027058
 8001294:	20027054 	.word	0x20027054

08001298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800129c:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <HAL_IncTick+0x20>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <HAL_IncTick+0x24>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	4a04      	ldr	r2, [pc, #16]	@ (80012bc <HAL_IncTick+0x24>)
 80012aa:	6013      	str	r3, [r2, #0]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20027058 	.word	0x20027058
 80012bc:	200278b8 	.word	0x200278b8

080012c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return uwTick;
 80012c4:	4b03      	ldr	r3, [pc, #12]	@ (80012d4 <HAL_GetTick+0x14>)
 80012c6:	681b      	ldr	r3, [r3, #0]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	200278b8 	.word	0x200278b8

080012d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e0:	f7ff ffee 	bl	80012c0 <HAL_GetTick>
 80012e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f0:	d005      	beq.n	80012fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012f2:	4b0a      	ldr	r3, [pc, #40]	@ (800131c <HAL_Delay+0x44>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4413      	add	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012fe:	bf00      	nop
 8001300:	f7ff ffde 	bl	80012c0 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	429a      	cmp	r2, r3
 800130e:	d8f7      	bhi.n	8001300 <HAL_Delay+0x28>
  {
  }
}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20027058 	.word	0x20027058

08001320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001330:	4b0c      	ldr	r3, [pc, #48]	@ (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800133c:	4013      	ands	r3, r2
 800133e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001348:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800134c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001352:	4a04      	ldr	r2, [pc, #16]	@ (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	60d3      	str	r3, [r2, #12]
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800136c:	4b04      	ldr	r3, [pc, #16]	@ (8001380 <__NVIC_GetPriorityGrouping+0x18>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	f003 0307 	and.w	r3, r3, #7
}
 8001376:	4618      	mov	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	2b00      	cmp	r3, #0
 8001394:	db0b      	blt.n	80013ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	f003 021f 	and.w	r2, r3, #31
 800139c:	4907      	ldr	r1, [pc, #28]	@ (80013bc <__NVIC_EnableIRQ+0x38>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	095b      	lsrs	r3, r3, #5
 80013a4:	2001      	movs	r0, #1
 80013a6:	fa00 f202 	lsl.w	r2, r0, r2
 80013aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000e100 	.word	0xe000e100

080013c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	6039      	str	r1, [r7, #0]
 80013ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	db0a      	blt.n	80013ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	490c      	ldr	r1, [pc, #48]	@ (800140c <__NVIC_SetPriority+0x4c>)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	0112      	lsls	r2, r2, #4
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	440b      	add	r3, r1
 80013e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e8:	e00a      	b.n	8001400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4908      	ldr	r1, [pc, #32]	@ (8001410 <__NVIC_SetPriority+0x50>)
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	3b04      	subs	r3, #4
 80013f8:	0112      	lsls	r2, r2, #4
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	440b      	add	r3, r1
 80013fe:	761a      	strb	r2, [r3, #24]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000e100 	.word	0xe000e100
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001414:	b480      	push	{r7}
 8001416:	b089      	sub	sp, #36	@ 0x24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f1c3 0307 	rsb	r3, r3, #7
 800142e:	2b04      	cmp	r3, #4
 8001430:	bf28      	it	cs
 8001432:	2304      	movcs	r3, #4
 8001434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3304      	adds	r3, #4
 800143a:	2b06      	cmp	r3, #6
 800143c:	d902      	bls.n	8001444 <NVIC_EncodePriority+0x30>
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3b03      	subs	r3, #3
 8001442:	e000      	b.n	8001446 <NVIC_EncodePriority+0x32>
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	f04f 32ff 	mov.w	r2, #4294967295
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43da      	mvns	r2, r3
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	401a      	ands	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800145c:	f04f 31ff 	mov.w	r1, #4294967295
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	fa01 f303 	lsl.w	r3, r1, r3
 8001466:	43d9      	mvns	r1, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	4313      	orrs	r3, r2
         );
}
 800146e:	4618      	mov	r0, r3
 8001470:	3724      	adds	r7, #36	@ 0x24
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
	...

0800147c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3b01      	subs	r3, #1
 8001488:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800148c:	d301      	bcc.n	8001492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800148e:	2301      	movs	r3, #1
 8001490:	e00f      	b.n	80014b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001492:	4a0a      	ldr	r2, [pc, #40]	@ (80014bc <SysTick_Config+0x40>)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3b01      	subs	r3, #1
 8001498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800149a:	210f      	movs	r1, #15
 800149c:	f04f 30ff 	mov.w	r0, #4294967295
 80014a0:	f7ff ff8e 	bl	80013c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a4:	4b05      	ldr	r3, [pc, #20]	@ (80014bc <SysTick_Config+0x40>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014aa:	4b04      	ldr	r3, [pc, #16]	@ (80014bc <SysTick_Config+0x40>)
 80014ac:	2207      	movs	r2, #7
 80014ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	e000e010 	.word	0xe000e010

080014c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff ff29 	bl	8001320 <__NVIC_SetPriorityGrouping>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b086      	sub	sp, #24
 80014da:	af00      	add	r7, sp, #0
 80014dc:	4603      	mov	r3, r0
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
 80014e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e8:	f7ff ff3e 	bl	8001368 <__NVIC_GetPriorityGrouping>
 80014ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	68b9      	ldr	r1, [r7, #8]
 80014f2:	6978      	ldr	r0, [r7, #20]
 80014f4:	f7ff ff8e 	bl	8001414 <NVIC_EncodePriority>
 80014f8:	4602      	mov	r2, r0
 80014fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fe:	4611      	mov	r1, r2
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff5d 	bl	80013c0 <__NVIC_SetPriority>
}
 8001506:	bf00      	nop
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	4603      	mov	r3, r0
 8001516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff31 	bl	8001384 <__NVIC_EnableIRQ>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff ffa2 	bl	800147c <SysTick_Config>
 8001538:	4603      	mov	r3, r0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b084      	sub	sp, #16
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800154e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001550:	f7ff feb6 	bl	80012c0 <HAL_GetTick>
 8001554:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d008      	beq.n	8001574 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2280      	movs	r2, #128	@ 0x80
 8001566:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e052      	b.n	800161a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 0216 	bic.w	r2, r2, #22
 8001582:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	695a      	ldr	r2, [r3, #20]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001592:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001598:	2b00      	cmp	r3, #0
 800159a:	d103      	bne.n	80015a4 <HAL_DMA_Abort+0x62>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d007      	beq.n	80015b4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f022 0208 	bic.w	r2, r2, #8
 80015b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 0201 	bic.w	r2, r2, #1
 80015c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015c4:	e013      	b.n	80015ee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015c6:	f7ff fe7b 	bl	80012c0 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b05      	cmp	r3, #5
 80015d2:	d90c      	bls.n	80015ee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2220      	movs	r2, #32
 80015d8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2203      	movs	r2, #3
 80015de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e015      	b.n	800161a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1e4      	bne.n	80015c6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001600:	223f      	movs	r2, #63	@ 0x3f
 8001602:	409a      	lsls	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d004      	beq.n	8001640 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2280      	movs	r2, #128	@ 0x80
 800163a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e00c      	b.n	800165a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2205      	movs	r2, #5
 8001644:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0201 	bic.w	r2, r2, #1
 8001656:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
	...

08001668 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e08a      	b.n	8001790 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001680:	2b00      	cmp	r3, #0
 8001682:	d106      	bne.n	8001692 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2223      	movs	r2, #35	@ 0x23
 8001688:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff fab5 	bl	8000bfc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	4b40      	ldr	r3, [pc, #256]	@ (8001798 <HAL_ETH_Init+0x130>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169a:	4a3f      	ldr	r2, [pc, #252]	@ (8001798 <HAL_ETH_Init+0x130>)
 800169c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80016a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001798 <HAL_ETH_Init+0x130>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80016ae:	4b3b      	ldr	r3, [pc, #236]	@ (800179c <HAL_ETH_Init+0x134>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	4a3a      	ldr	r2, [pc, #232]	@ (800179c <HAL_ETH_Init+0x134>)
 80016b4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80016b8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80016ba:	4b38      	ldr	r3, [pc, #224]	@ (800179c <HAL_ETH_Init+0x134>)
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	4936      	ldr	r1, [pc, #216]	@ (800179c <HAL_ETH_Init+0x134>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80016c8:	4b34      	ldr	r3, [pc, #208]	@ (800179c <HAL_ETH_Init+0x134>)
 80016ca:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6812      	ldr	r2, [r2, #0]
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016e4:	f7ff fdec 	bl	80012c0 <HAL_GetTick>
 80016e8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80016ea:	e011      	b.n	8001710 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80016ec:	f7ff fde8 	bl	80012c0 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016fa:	d909      	bls.n	8001710 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2204      	movs	r2, #4
 8001700:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	22e0      	movs	r2, #224	@ 0xe0
 8001708:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e03f      	b.n	8001790 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1e4      	bne.n	80016ec <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 f97a 	bl	8001a1c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 fa25 	bl	8001b78 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 fa7b 	bl	8001c2a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	461a      	mov	r2, r3
 800173a:	2100      	movs	r1, #0
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 f9e3 	bl	8001b08 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001750:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6812      	ldr	r2, [r2, #0]
 800175e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001762:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001766:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800177a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2210      	movs	r2, #16
 800178a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40023800 	.word	0x40023800
 800179c:	40013800 	.word	0x40013800

080017a0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	4b53      	ldr	r3, [pc, #332]	@ (8001904 <ETH_SetMACConfig+0x164>)
 80017b6:	4013      	ands	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	7b9b      	ldrb	r3, [r3, #14]
 80017be:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	7c12      	ldrb	r2, [r2, #16]
 80017c4:	2a00      	cmp	r2, #0
 80017c6:	d102      	bne.n	80017ce <ETH_SetMACConfig+0x2e>
 80017c8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80017cc:	e000      	b.n	80017d0 <ETH_SetMACConfig+0x30>
 80017ce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80017d0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	7c52      	ldrb	r2, [r2, #17]
 80017d6:	2a00      	cmp	r2, #0
 80017d8:	d102      	bne.n	80017e0 <ETH_SetMACConfig+0x40>
 80017da:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80017de:	e000      	b.n	80017e2 <ETH_SetMACConfig+0x42>
 80017e0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80017e2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80017e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	7fdb      	ldrb	r3, [r3, #31]
 80017ee:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80017f0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80017f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	7f92      	ldrb	r2, [r2, #30]
 80017fc:	2a00      	cmp	r2, #0
 80017fe:	d102      	bne.n	8001806 <ETH_SetMACConfig+0x66>
 8001800:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001804:	e000      	b.n	8001808 <ETH_SetMACConfig+0x68>
 8001806:	2200      	movs	r2, #0
                        macconf->Speed |
 8001808:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	7f1b      	ldrb	r3, [r3, #28]
 800180e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001810:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001816:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	791b      	ldrb	r3, [r3, #4]
 800181c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800181e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001826:	2a00      	cmp	r2, #0
 8001828:	d102      	bne.n	8001830 <ETH_SetMACConfig+0x90>
 800182a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800182e:	e000      	b.n	8001832 <ETH_SetMACConfig+0x92>
 8001830:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001832:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	7bdb      	ldrb	r3, [r3, #15]
 8001838:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800183a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001840:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001848:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800184a:	4313      	orrs	r3, r2
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	4313      	orrs	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001862:	2001      	movs	r0, #1
 8001864:	f7ff fd38 	bl	80012d8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800187e:	4013      	ands	r3, r2
 8001880:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001886:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800188e:	2a00      	cmp	r2, #0
 8001890:	d101      	bne.n	8001896 <ETH_SetMACConfig+0xf6>
 8001892:	2280      	movs	r2, #128	@ 0x80
 8001894:	e000      	b.n	8001898 <ETH_SetMACConfig+0xf8>
 8001896:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001898:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800189e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80018a6:	2a01      	cmp	r2, #1
 80018a8:	d101      	bne.n	80018ae <ETH_SetMACConfig+0x10e>
 80018aa:	2208      	movs	r2, #8
 80018ac:	e000      	b.n	80018b0 <ETH_SetMACConfig+0x110>
 80018ae:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80018b0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d101      	bne.n	80018c0 <ETH_SetMACConfig+0x120>
 80018bc:	2204      	movs	r2, #4
 80018be:	e000      	b.n	80018c2 <ETH_SetMACConfig+0x122>
 80018c0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80018c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80018ca:	2a01      	cmp	r2, #1
 80018cc:	d101      	bne.n	80018d2 <ETH_SetMACConfig+0x132>
 80018ce:	2202      	movs	r2, #2
 80018d0:	e000      	b.n	80018d4 <ETH_SetMACConfig+0x134>
 80018d2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80018d4:	4313      	orrs	r3, r2
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	4313      	orrs	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80018ec:	2001      	movs	r0, #1
 80018ee:	f7ff fcf3 	bl	80012d8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	619a      	str	r2, [r3, #24]
}
 80018fa:	bf00      	nop
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	fd20810f 	.word	0xfd20810f

08001908 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	4b3d      	ldr	r3, [pc, #244]	@ (8001a18 <ETH_SetDMAConfig+0x110>)
 8001922:	4013      	ands	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	7b1b      	ldrb	r3, [r3, #12]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d102      	bne.n	8001934 <ETH_SetDMAConfig+0x2c>
 800192e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001932:	e000      	b.n	8001936 <ETH_SetDMAConfig+0x2e>
 8001934:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	7b5b      	ldrb	r3, [r3, #13]
 800193a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800193c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	7f52      	ldrb	r2, [r2, #29]
 8001942:	2a00      	cmp	r2, #0
 8001944:	d102      	bne.n	800194c <ETH_SetDMAConfig+0x44>
 8001946:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800194a:	e000      	b.n	800194e <ETH_SetDMAConfig+0x46>
 800194c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800194e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	7b9b      	ldrb	r3, [r3, #14]
 8001954:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001956:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800195c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	7f1b      	ldrb	r3, [r3, #28]
 8001962:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001964:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	7f9b      	ldrb	r3, [r3, #30]
 800196a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800196c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001972:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800197a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800197c:	4313      	orrs	r3, r2
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	4313      	orrs	r3, r2
 8001982:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800198c:	461a      	mov	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800199e:	2001      	movs	r0, #1
 80019a0:	f7ff fc9a 	bl	80012d8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019ac:	461a      	mov	r2, r3
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	791b      	ldrb	r3, [r3, #4]
 80019b6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80019bc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80019c2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80019c8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80019d0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80019d2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80019da:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80019e0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80019ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019ee:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019fc:	2001      	movs	r0, #1
 80019fe:	f7ff fc6b 	bl	80012d8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6013      	str	r3, [r2, #0]
}
 8001a10:	bf00      	nop
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	f8de3f23 	.word	0xf8de3f23

08001a1c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b0a6      	sub	sp, #152	@ 0x98
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001a24:	2301      	movs	r3, #1
 8001a26:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001a30:	2300      	movs	r3, #0
 8001a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001a46:	2301      	movs	r3, #1
 8001a48:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001a72:	2300      	movs	r3, #0
 8001a74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001a84:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a88:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001a8a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001a96:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff fe7f 	bl	80017a0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001ad2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ad6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001ad8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001adc:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ade:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ae2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001af2:	f107 0308 	add.w	r3, r7, #8
 8001af6:	4619      	mov	r1, r3
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff ff05 	bl	8001908 <ETH_SetDMAConfig>
}
 8001afe:	bf00      	nop
 8001b00:	3798      	adds	r7, #152	@ 0x98
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b087      	sub	sp, #28
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3305      	adds	r3, #5
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	021b      	lsls	r3, r3, #8
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	3204      	adds	r2, #4
 8001b20:	7812      	ldrb	r2, [r2, #0]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	4b11      	ldr	r3, [pc, #68]	@ (8001b70 <ETH_MACAddressConfig+0x68>)
 8001b2a:	4413      	add	r3, r2
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3303      	adds	r3, #3
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	061a      	lsls	r2, r3, #24
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	3302      	adds	r3, #2
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	041b      	lsls	r3, r3, #16
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3301      	adds	r3, #1
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	021b      	lsls	r3, r3, #8
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	7812      	ldrb	r2, [r2, #0]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <ETH_MACAddressConfig+0x6c>)
 8001b5a:	4413      	add	r3, r2
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	6013      	str	r3, [r2, #0]
}
 8001b62:	bf00      	nop
 8001b64:	371c      	adds	r7, #28
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40028040 	.word	0x40028040
 8001b74:	40028044 	.word	0x40028044

08001b78 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	e03e      	b.n	8001c04 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68d9      	ldr	r1, [r3, #12]
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	440b      	add	r3, r1
 8001b96:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	2200      	movs	r2, #0
 8001bae:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001bb0:	68b9      	ldr	r1, [r7, #8]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	3206      	adds	r2, #6
 8001bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d80c      	bhi.n	8001be8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68d9      	ldr	r1, [r3, #12]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	1c5a      	adds	r2, r3, #1
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	440b      	add	r3, r1
 8001be0:	461a      	mov	r2, r3
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	e004      	b.n	8001bf2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	461a      	mov	r2, r3
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	3301      	adds	r3, #1
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2b03      	cmp	r3, #3
 8001c08:	d9bd      	bls.n	8001b86 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c1c:	611a      	str	r2, [r3, #16]
}
 8001c1e:	bf00      	nop
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b085      	sub	sp, #20
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	e048      	b.n	8001cca <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6919      	ldr	r1, [r3, #16]
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	440b      	add	r3, r1
 8001c48:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	2200      	movs	r2, #0
 8001c54:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	2200      	movs	r2, #0
 8001c66:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001c74:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001c8e:	68b9      	ldr	r1, [r7, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	3212      	adds	r2, #18
 8001c96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d80c      	bhi.n	8001cba <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6919      	ldr	r1, [r3, #16]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	440b      	add	r3, r1
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	60da      	str	r2, [r3, #12]
 8001cb8:	e004      	b.n	8001cc4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	d9b3      	bls.n	8001c38 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691a      	ldr	r2, [r3, #16]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cfa:	60da      	str	r2, [r3, #12]
}
 8001cfc:	bf00      	nop
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b089      	sub	sp, #36	@ 0x24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
 8001d22:	e177      	b.n	8002014 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d24:	2201      	movs	r2, #1
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	f040 8166 	bne.w	800200e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d005      	beq.n	8001d5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d130      	bne.n	8001dbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	2203      	movs	r2, #3
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	68da      	ldr	r2, [r3, #12]
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d90:	2201      	movs	r2, #1
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	091b      	lsrs	r3, r3, #4
 8001da6:	f003 0201 	and.w	r2, r3, #1
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	2b03      	cmp	r3, #3
 8001dc6:	d017      	beq.n	8001df8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d123      	bne.n	8001e4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	08da      	lsrs	r2, r3, #3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3208      	adds	r2, #8
 8001e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	220f      	movs	r2, #15
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	08da      	lsrs	r2, r3, #3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3208      	adds	r2, #8
 8001e46:	69b9      	ldr	r1, [r7, #24]
 8001e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	2203      	movs	r2, #3
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 0203 	and.w	r2, r3, #3
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 80c0 	beq.w	800200e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	4b66      	ldr	r3, [pc, #408]	@ (800202c <HAL_GPIO_Init+0x324>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e96:	4a65      	ldr	r2, [pc, #404]	@ (800202c <HAL_GPIO_Init+0x324>)
 8001e98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e9e:	4b63      	ldr	r3, [pc, #396]	@ (800202c <HAL_GPIO_Init+0x324>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eaa:	4a61      	ldr	r2, [pc, #388]	@ (8002030 <HAL_GPIO_Init+0x328>)
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	089b      	lsrs	r3, r3, #2
 8001eb0:	3302      	adds	r3, #2
 8001eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	220f      	movs	r2, #15
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a58      	ldr	r2, [pc, #352]	@ (8002034 <HAL_GPIO_Init+0x32c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d037      	beq.n	8001f46 <HAL_GPIO_Init+0x23e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a57      	ldr	r2, [pc, #348]	@ (8002038 <HAL_GPIO_Init+0x330>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d031      	beq.n	8001f42 <HAL_GPIO_Init+0x23a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a56      	ldr	r2, [pc, #344]	@ (800203c <HAL_GPIO_Init+0x334>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d02b      	beq.n	8001f3e <HAL_GPIO_Init+0x236>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a55      	ldr	r2, [pc, #340]	@ (8002040 <HAL_GPIO_Init+0x338>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d025      	beq.n	8001f3a <HAL_GPIO_Init+0x232>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a54      	ldr	r2, [pc, #336]	@ (8002044 <HAL_GPIO_Init+0x33c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d01f      	beq.n	8001f36 <HAL_GPIO_Init+0x22e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a53      	ldr	r2, [pc, #332]	@ (8002048 <HAL_GPIO_Init+0x340>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d019      	beq.n	8001f32 <HAL_GPIO_Init+0x22a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a52      	ldr	r2, [pc, #328]	@ (800204c <HAL_GPIO_Init+0x344>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d013      	beq.n	8001f2e <HAL_GPIO_Init+0x226>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a51      	ldr	r2, [pc, #324]	@ (8002050 <HAL_GPIO_Init+0x348>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d00d      	beq.n	8001f2a <HAL_GPIO_Init+0x222>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a50      	ldr	r2, [pc, #320]	@ (8002054 <HAL_GPIO_Init+0x34c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d007      	beq.n	8001f26 <HAL_GPIO_Init+0x21e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a4f      	ldr	r2, [pc, #316]	@ (8002058 <HAL_GPIO_Init+0x350>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d101      	bne.n	8001f22 <HAL_GPIO_Init+0x21a>
 8001f1e:	2309      	movs	r3, #9
 8001f20:	e012      	b.n	8001f48 <HAL_GPIO_Init+0x240>
 8001f22:	230a      	movs	r3, #10
 8001f24:	e010      	b.n	8001f48 <HAL_GPIO_Init+0x240>
 8001f26:	2308      	movs	r3, #8
 8001f28:	e00e      	b.n	8001f48 <HAL_GPIO_Init+0x240>
 8001f2a:	2307      	movs	r3, #7
 8001f2c:	e00c      	b.n	8001f48 <HAL_GPIO_Init+0x240>
 8001f2e:	2306      	movs	r3, #6
 8001f30:	e00a      	b.n	8001f48 <HAL_GPIO_Init+0x240>
 8001f32:	2305      	movs	r3, #5
 8001f34:	e008      	b.n	8001f48 <HAL_GPIO_Init+0x240>
 8001f36:	2304      	movs	r3, #4
 8001f38:	e006      	b.n	8001f48 <HAL_GPIO_Init+0x240>
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e004      	b.n	8001f48 <HAL_GPIO_Init+0x240>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e002      	b.n	8001f48 <HAL_GPIO_Init+0x240>
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <HAL_GPIO_Init+0x240>
 8001f46:	2300      	movs	r3, #0
 8001f48:	69fa      	ldr	r2, [r7, #28]
 8001f4a:	f002 0203 	and.w	r2, r2, #3
 8001f4e:	0092      	lsls	r2, r2, #2
 8001f50:	4093      	lsls	r3, r2
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f58:	4935      	ldr	r1, [pc, #212]	@ (8002030 <HAL_GPIO_Init+0x328>)
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	089b      	lsrs	r3, r3, #2
 8001f5e:	3302      	adds	r3, #2
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f66:	4b3d      	ldr	r3, [pc, #244]	@ (800205c <HAL_GPIO_Init+0x354>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f8a:	4a34      	ldr	r2, [pc, #208]	@ (800205c <HAL_GPIO_Init+0x354>)
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f90:	4b32      	ldr	r3, [pc, #200]	@ (800205c <HAL_GPIO_Init+0x354>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fb4:	4a29      	ldr	r2, [pc, #164]	@ (800205c <HAL_GPIO_Init+0x354>)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fba:	4b28      	ldr	r3, [pc, #160]	@ (800205c <HAL_GPIO_Init+0x354>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fde:	4a1f      	ldr	r2, [pc, #124]	@ (800205c <HAL_GPIO_Init+0x354>)
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800205c <HAL_GPIO_Init+0x354>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002008:	4a14      	ldr	r2, [pc, #80]	@ (800205c <HAL_GPIO_Init+0x354>)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3301      	adds	r3, #1
 8002012:	61fb      	str	r3, [r7, #28]
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	2b0f      	cmp	r3, #15
 8002018:	f67f ae84 	bls.w	8001d24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	3724      	adds	r7, #36	@ 0x24
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40023800 	.word	0x40023800
 8002030:	40013800 	.word	0x40013800
 8002034:	40020000 	.word	0x40020000
 8002038:	40020400 	.word	0x40020400
 800203c:	40020800 	.word	0x40020800
 8002040:	40020c00 	.word	0x40020c00
 8002044:	40021000 	.word	0x40021000
 8002048:	40021400 	.word	0x40021400
 800204c:	40021800 	.word	0x40021800
 8002050:	40021c00 	.word	0x40021c00
 8002054:	40022000 	.word	0x40022000
 8002058:	40022400 	.word	0x40022400
 800205c:	40013c00 	.word	0x40013c00

08002060 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	691a      	ldr	r2, [r3, #16]
 8002070:	887b      	ldrh	r3, [r7, #2]
 8002072:	4013      	ands	r3, r2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d002      	beq.n	800207e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002078:	2301      	movs	r3, #1
 800207a:	73fb      	strb	r3, [r7, #15]
 800207c:	e001      	b.n	8002082 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800207e:	2300      	movs	r3, #0
 8002080:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002082:	7bfb      	ldrb	r3, [r7, #15]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	807b      	strh	r3, [r7, #2]
 800209c:	4613      	mov	r3, r2
 800209e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020a0:	787b      	ldrb	r3, [r7, #1]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020a6:	887a      	ldrh	r2, [r7, #2]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020ac:	e003      	b.n	80020b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020ae:	887b      	ldrh	r3, [r7, #2]
 80020b0:	041a      	lsls	r2, r3, #16
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	619a      	str	r2, [r3, #24]
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b088      	sub	sp, #32
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e128      	b.n	8002328 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d109      	bne.n	80020f6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a90      	ldr	r2, [pc, #576]	@ (8002330 <HAL_I2S_Init+0x26c>)
 80020ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7fe fe49 	bl	8000d88 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2202      	movs	r2, #2
 80020fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	6812      	ldr	r2, [r2, #0]
 8002108:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800210c:	f023 030f 	bic.w	r3, r3, #15
 8002110:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2202      	movs	r2, #2
 8002118:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	2b02      	cmp	r3, #2
 8002120:	d060      	beq.n	80021e4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d102      	bne.n	8002130 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800212a:	2310      	movs	r3, #16
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	e001      	b.n	8002134 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002130:	2320      	movs	r3, #32
 8002132:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b20      	cmp	r3, #32
 800213a:	d802      	bhi.n	8002142 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002142:	2001      	movs	r0, #1
 8002144:	f001 fcec 	bl	8003b20 <HAL_RCCEx_GetPeriphCLKFreq>
 8002148:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002152:	d125      	bne.n	80021a0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d010      	beq.n	800217e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	fbb2 f2f3 	udiv	r2, r2, r3
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	461a      	mov	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	fbb2 f3f3 	udiv	r3, r2, r3
 8002178:	3305      	adds	r3, #5
 800217a:	613b      	str	r3, [r7, #16]
 800217c:	e01f      	b.n	80021be <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	fbb2 f2f3 	udiv	r2, r2, r3
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	461a      	mov	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	fbb2 f3f3 	udiv	r3, r2, r3
 800219a:	3305      	adds	r3, #5
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	e00e      	b.n	80021be <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	461a      	mov	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ba:	3305      	adds	r3, #5
 80021bc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4a5c      	ldr	r2, [pc, #368]	@ (8002334 <HAL_I2S_Init+0x270>)
 80021c2:	fba2 2303 	umull	r2, r3, r2, r3
 80021c6:	08db      	lsrs	r3, r3, #3
 80021c8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	085b      	lsrs	r3, r3, #1
 80021da:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	021b      	lsls	r3, r3, #8
 80021e0:	61bb      	str	r3, [r7, #24]
 80021e2:	e003      	b.n	80021ec <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80021e4:	2302      	movs	r3, #2
 80021e6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d902      	bls.n	80021f8 <HAL_I2S_Init+0x134>
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	2bff      	cmp	r3, #255	@ 0xff
 80021f6:	d907      	bls.n	8002208 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fc:	f043 0210 	orr.w	r2, r3, #16
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e08f      	b.n	8002328 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691a      	ldr	r2, [r3, #16]
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	ea42 0103 	orr.w	r1, r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	69fa      	ldr	r2, [r7, #28]
 8002218:	430a      	orrs	r2, r1
 800221a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002226:	f023 030f 	bic.w	r3, r3, #15
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6851      	ldr	r1, [r2, #4]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6892      	ldr	r2, [r2, #8]
 8002232:	4311      	orrs	r1, r2
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	68d2      	ldr	r2, [r2, #12]
 8002238:	4311      	orrs	r1, r2
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6992      	ldr	r2, [r2, #24]
 800223e:	430a      	orrs	r2, r1
 8002240:	431a      	orrs	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800224a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d161      	bne.n	8002318 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a38      	ldr	r2, [pc, #224]	@ (8002338 <HAL_I2S_Init+0x274>)
 8002258:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a37      	ldr	r2, [pc, #220]	@ (800233c <HAL_I2S_Init+0x278>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d101      	bne.n	8002268 <HAL_I2S_Init+0x1a4>
 8002264:	4b36      	ldr	r3, [pc, #216]	@ (8002340 <HAL_I2S_Init+0x27c>)
 8002266:	e001      	b.n	800226c <HAL_I2S_Init+0x1a8>
 8002268:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6812      	ldr	r2, [r2, #0]
 8002272:	4932      	ldr	r1, [pc, #200]	@ (800233c <HAL_I2S_Init+0x278>)
 8002274:	428a      	cmp	r2, r1
 8002276:	d101      	bne.n	800227c <HAL_I2S_Init+0x1b8>
 8002278:	4a31      	ldr	r2, [pc, #196]	@ (8002340 <HAL_I2S_Init+0x27c>)
 800227a:	e001      	b.n	8002280 <HAL_I2S_Init+0x1bc>
 800227c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002280:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002284:	f023 030f 	bic.w	r3, r3, #15
 8002288:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a2b      	ldr	r2, [pc, #172]	@ (800233c <HAL_I2S_Init+0x278>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d101      	bne.n	8002298 <HAL_I2S_Init+0x1d4>
 8002294:	4b2a      	ldr	r3, [pc, #168]	@ (8002340 <HAL_I2S_Init+0x27c>)
 8002296:	e001      	b.n	800229c <HAL_I2S_Init+0x1d8>
 8002298:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800229c:	2202      	movs	r2, #2
 800229e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a25      	ldr	r2, [pc, #148]	@ (800233c <HAL_I2S_Init+0x278>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d101      	bne.n	80022ae <HAL_I2S_Init+0x1ea>
 80022aa:	4b25      	ldr	r3, [pc, #148]	@ (8002340 <HAL_I2S_Init+0x27c>)
 80022ac:	e001      	b.n	80022b2 <HAL_I2S_Init+0x1ee>
 80022ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022be:	d003      	beq.n	80022c8 <HAL_I2S_Init+0x204>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d103      	bne.n	80022d0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80022c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022cc:	613b      	str	r3, [r7, #16]
 80022ce:	e001      	b.n	80022d4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80022d0:	2300      	movs	r3, #0
 80022d2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022de:	4313      	orrs	r3, r2
 80022e0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022e8:	4313      	orrs	r3, r2
 80022ea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022f2:	4313      	orrs	r3, r2
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	897b      	ldrh	r3, [r7, #10]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002300:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a0d      	ldr	r2, [pc, #52]	@ (800233c <HAL_I2S_Init+0x278>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d101      	bne.n	8002310 <HAL_I2S_Init+0x24c>
 800230c:	4b0c      	ldr	r3, [pc, #48]	@ (8002340 <HAL_I2S_Init+0x27c>)
 800230e:	e001      	b.n	8002314 <HAL_I2S_Init+0x250>
 8002310:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002314:	897a      	ldrh	r2, [r7, #10]
 8002316:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3720      	adds	r7, #32
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	08002615 	.word	0x08002615
 8002334:	cccccccd 	.word	0xcccccccd
 8002338:	0800279d 	.word	0x0800279d
 800233c:	40003800 	.word	0x40003800
 8002340:	40003400 	.word	0x40003400

08002344 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	603b      	str	r3, [r7, #0]
 8002350:	4613      	mov	r3, r2
 8002352:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d002      	beq.n	8002360 <HAL_I2S_Transmit+0x1c>
 800235a:	88fb      	ldrh	r3, [r7, #6]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_I2S_Transmit+0x20>
  {
    return  HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e0d8      	b.n	8002516 <HAL_I2S_Transmit+0x1d2>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b01      	cmp	r3, #1
 800236e:	d001      	beq.n	8002374 <HAL_I2S_Transmit+0x30>
  {
    return HAL_BUSY;
 8002370:	2302      	movs	r3, #2
 8002372:	e0d0      	b.n	8002516 <HAL_I2S_Transmit+0x1d2>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b01      	cmp	r3, #1
 800237e:	d101      	bne.n	8002384 <HAL_I2S_Transmit+0x40>
 8002380:	2302      	movs	r3, #2
 8002382:	e0c8      	b.n	8002516 <HAL_I2S_Transmit+0x1d2>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2203      	movs	r2, #3
 8002390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	d002      	beq.n	80023b8 <HAL_I2S_Transmit+0x74>
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	2b05      	cmp	r3, #5
 80023b6:	d10a      	bne.n	80023ce <HAL_I2S_Transmit+0x8a>
  {
    hi2s->TxXferSize = (Size << 1U);
 80023b8:	88fb      	ldrh	r3, [r7, #6]
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	b29a      	uxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 80023c2:	88fb      	ldrh	r3, [r7, #6]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80023cc:	e005      	b.n	80023da <HAL_I2S_Transmit+0x96>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	88fa      	ldrh	r2, [r7, #6]
 80023d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	88fa      	ldrh	r2, [r7, #6]
 80023d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023f0:	d007      	beq.n	8002402 <HAL_I2S_Transmit+0xbe>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	69da      	ldr	r2, [r3, #28]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002400:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	2201      	movs	r2, #1
 8002406:	2102      	movs	r1, #2
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 f98d 	bl	8002728 <I2S_WaitFlagStateUntilTimeout>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d04e      	beq.n	80024b2 <HAL_I2S_Transmit+0x16e>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002418:	f043 0201 	orr.w	r2, r3, #1
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2s);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e070      	b.n	8002516 <HAL_I2S_Transmit+0x1d2>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002438:	881a      	ldrh	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002444:	1c9a      	adds	r2, r3, #2
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2s->TxXferCount--;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800244e:	b29b      	uxth	r3, r3
 8002450:	3b01      	subs	r3, #1
 8002452:	b29a      	uxth	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	2201      	movs	r2, #1
 800245c:	2102      	movs	r1, #2
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 f962 	bl	8002728 <I2S_WaitFlagStateUntilTimeout>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00f      	beq.n	800248a <HAL_I2S_Transmit+0x146>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246e:	f043 0201 	orr.w	r2, r3, #1
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      __HAL_UNLOCK(hi2s);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e045      	b.n	8002516 <HAL_I2S_Transmit+0x1d2>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 0308 	and.w	r3, r3, #8
 8002494:	2b08      	cmp	r3, #8
 8002496:	d10c      	bne.n	80024b2 <HAL_I2S_Transmit+0x16e>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002498:	2300      	movs	r3, #0
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	613b      	str	r3, [r7, #16]
 80024a4:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024aa:	f043 0204 	orr.w	r2, r3, #4
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	645a      	str	r2, [r3, #68]	@ 0x44
  while (hi2s->TxXferCount > 0U)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1bb      	bne.n	8002434 <HAL_I2S_Transmit+0xf0>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d005      	beq.n	80024d2 <HAL_I2S_Transmit+0x18e>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024d0:	d118      	bne.n	8002504 <HAL_I2S_Transmit+0x1c0>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	2200      	movs	r2, #0
 80024d6:	2180      	movs	r1, #128	@ 0x80
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 f925 	bl	8002728 <I2S_WaitFlagStateUntilTimeout>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00f      	beq.n	8002504 <HAL_I2S_Transmit+0x1c0>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e8:	f043 0201 	orr.w	r2, r3, #1
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      __HAL_UNLOCK(hi2s);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e008      	b.n	8002516 <HAL_I2S_Transmit+0x1d2>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  __HAL_UNLOCK(hi2s);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002566:	881a      	ldrh	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002572:	1c9a      	adds	r2, r3, #2
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800257c:	b29b      	uxth	r3, r3
 800257e:	3b01      	subs	r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800258a:	b29b      	uxth	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10e      	bne.n	80025ae <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800259e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7ff ffb8 	bl	800251e <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c8:	b292      	uxth	r2, r2
 80025ca:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d0:	1c9a      	adds	r2, r3, #2
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80025da:	b29b      	uxth	r3, r3
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10e      	bne.n	800260c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80025fc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff ff93 	bl	8002532 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800260c:	bf00      	nop
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b04      	cmp	r3, #4
 800262e:	d13a      	bne.n	80026a6 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b01      	cmp	r3, #1
 8002638:	d109      	bne.n	800264e <I2S_IRQHandler+0x3a>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002644:	2b40      	cmp	r3, #64	@ 0x40
 8002646:	d102      	bne.n	800264e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7ff ffb4 	bl	80025b6 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002654:	2b40      	cmp	r3, #64	@ 0x40
 8002656:	d126      	bne.n	80026a6 <I2S_IRQHandler+0x92>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f003 0320 	and.w	r3, r3, #32
 8002662:	2b20      	cmp	r3, #32
 8002664:	d11f      	bne.n	80026a6 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002674:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002676:	2300      	movs	r3, #0
 8002678:	613b      	str	r3, [r7, #16]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002698:	f043 0202 	orr.w	r2, r3, #2
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f7ff ff50 	bl	8002546 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d136      	bne.n	8002720 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d109      	bne.n	80026d0 <I2S_IRQHandler+0xbc>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026c6:	2b80      	cmp	r3, #128	@ 0x80
 80026c8:	d102      	bne.n	80026d0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff ff45 	bl	800255a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d122      	bne.n	8002720 <I2S_IRQHandler+0x10c>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 0320 	and.w	r3, r3, #32
 80026e4:	2b20      	cmp	r3, #32
 80026e6:	d11b      	bne.n	8002720 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80026f6:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002712:	f043 0204 	orr.w	r2, r3, #4
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff ff13 	bl	8002546 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002720:	bf00      	nop
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	603b      	str	r3, [r7, #0]
 8002734:	4613      	mov	r3, r2
 8002736:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002738:	f7fe fdc2 	bl	80012c0 <HAL_GetTick>
 800273c:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800273e:	e018      	b.n	8002772 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002746:	d014      	beq.n	8002772 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8002748:	f7fe fdba 	bl	80012c0 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	d902      	bls.n	800275e <I2S_WaitFlagStateUntilTimeout+0x36>
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d109      	bne.n	8002772 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e00f      	b.n	8002792 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	4013      	ands	r3, r2
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	429a      	cmp	r2, r3
 8002780:	bf0c      	ite	eq
 8002782:	2301      	moveq	r3, #1
 8002784:	2300      	movne	r3, #0
 8002786:	b2db      	uxtb	r3, r3
 8002788:	461a      	mov	r2, r3
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	429a      	cmp	r2, r3
 800278e:	d1d7      	bne.n	8002740 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a92      	ldr	r2, [pc, #584]	@ (80029fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d101      	bne.n	80027ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80027b6:	4b92      	ldr	r3, [pc, #584]	@ (8002a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80027b8:	e001      	b.n	80027be <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80027ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a8b      	ldr	r2, [pc, #556]	@ (80029fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d101      	bne.n	80027d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80027d4:	4b8a      	ldr	r3, [pc, #552]	@ (8002a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80027d6:	e001      	b.n	80027dc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80027d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027e8:	d004      	beq.n	80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f040 8099 	bne.w	8002926 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d107      	bne.n	800280e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002804:	2b00      	cmp	r3, #0
 8002806:	d002      	beq.n	800280e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f925 	bl	8002a58 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b01      	cmp	r3, #1
 8002816:	d107      	bne.n	8002828 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800281e:	2b00      	cmp	r3, #0
 8002820:	d002      	beq.n	8002828 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f9c8 	bl	8002bb8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800282e:	2b40      	cmp	r3, #64	@ 0x40
 8002830:	d13a      	bne.n	80028a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	f003 0320 	and.w	r3, r3, #32
 8002838:	2b00      	cmp	r3, #0
 800283a:	d035      	beq.n	80028a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a6e      	ldr	r2, [pc, #440]	@ (80029fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d101      	bne.n	800284a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002846:	4b6e      	ldr	r3, [pc, #440]	@ (8002a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002848:	e001      	b.n	800284e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800284a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4969      	ldr	r1, [pc, #420]	@ (80029fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002856:	428b      	cmp	r3, r1
 8002858:	d101      	bne.n	800285e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800285a:	4b69      	ldr	r3, [pc, #420]	@ (8002a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800285c:	e001      	b.n	8002862 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800285e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002862:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002866:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002876:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002878:	2300      	movs	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800289a:	f043 0202 	orr.w	r2, r3, #2
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff fe4f 	bl	8002546 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f003 0308 	and.w	r3, r3, #8
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	f040 80c3 	bne.w	8002a3a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f003 0320 	and.w	r3, r3, #32
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 80bd 	beq.w	8002a3a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80028ce:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a49      	ldr	r2, [pc, #292]	@ (80029fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d101      	bne.n	80028de <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80028da:	4b49      	ldr	r3, [pc, #292]	@ (8002a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80028dc:	e001      	b.n	80028e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80028de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4944      	ldr	r1, [pc, #272]	@ (80029fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80028ea:	428b      	cmp	r3, r1
 80028ec:	d101      	bne.n	80028f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80028ee:	4b44      	ldr	r3, [pc, #272]	@ (8002a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80028f0:	e001      	b.n	80028f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80028f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80028f6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80028fa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80028fc:	2300      	movs	r3, #0
 80028fe:	60bb      	str	r3, [r7, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002916:	f043 0204 	orr.w	r2, r3, #4
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7ff fe11 	bl	8002546 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002924:	e089      	b.n	8002a3a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b02      	cmp	r3, #2
 800292e:	d107      	bne.n	8002940 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002936:	2b00      	cmp	r3, #0
 8002938:	d002      	beq.n	8002940 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f8be 	bl	8002abc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b01      	cmp	r3, #1
 8002948:	d107      	bne.n	800295a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002950:	2b00      	cmp	r3, #0
 8002952:	d002      	beq.n	800295a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f8fd 	bl	8002b54 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002960:	2b40      	cmp	r3, #64	@ 0x40
 8002962:	d12f      	bne.n	80029c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	f003 0320 	and.w	r3, r3, #32
 800296a:	2b00      	cmp	r3, #0
 800296c:	d02a      	beq.n	80029c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800297c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a1e      	ldr	r2, [pc, #120]	@ (80029fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d101      	bne.n	800298c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002988:	4b1d      	ldr	r3, [pc, #116]	@ (8002a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800298a:	e001      	b.n	8002990 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800298c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4919      	ldr	r1, [pc, #100]	@ (80029fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002998:	428b      	cmp	r3, r1
 800299a:	d101      	bne.n	80029a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800299c:	4b18      	ldr	r3, [pc, #96]	@ (8002a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800299e:	e001      	b.n	80029a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80029a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029a4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80029a8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b6:	f043 0202 	orr.w	r2, r3, #2
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7ff fdc1 	bl	8002546 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b08      	cmp	r3, #8
 80029cc:	d136      	bne.n	8002a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	f003 0320 	and.w	r3, r3, #32
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d031      	beq.n	8002a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a07      	ldr	r2, [pc, #28]	@ (80029fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d101      	bne.n	80029e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80029e2:	4b07      	ldr	r3, [pc, #28]	@ (8002a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80029e4:	e001      	b.n	80029ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80029e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4902      	ldr	r1, [pc, #8]	@ (80029fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80029f2:	428b      	cmp	r3, r1
 80029f4:	d106      	bne.n	8002a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80029f6:	4b02      	ldr	r3, [pc, #8]	@ (8002a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80029f8:	e006      	b.n	8002a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80029fa:	bf00      	nop
 80029fc:	40003800 	.word	0x40003800
 8002a00:	40003400 	.word	0x40003400
 8002a04:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a08:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002a0c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002a1c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a2a:	f043 0204 	orr.w	r2, r3, #4
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7ff fd87 	bl	8002546 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a38:	e000      	b.n	8002a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002a3a:	bf00      	nop
}
 8002a3c:	bf00      	nop
 8002a3e:	3720      	adds	r7, #32
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a64:	1c99      	adds	r1, r3, #2
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6251      	str	r1, [r2, #36]	@ 0x24
 8002a6a:	881a      	ldrh	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d113      	bne.n	8002ab2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002a98:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d106      	bne.n	8002ab2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff ffc9 	bl	8002a44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac8:	1c99      	adds	r1, r3, #2
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6251      	str	r1, [r2, #36]	@ 0x24
 8002ace:	8819      	ldrh	r1, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8002b4c <I2SEx_TxISR_I2SExt+0x90>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d101      	bne.n	8002ade <I2SEx_TxISR_I2SExt+0x22>
 8002ada:	4b1d      	ldr	r3, [pc, #116]	@ (8002b50 <I2SEx_TxISR_I2SExt+0x94>)
 8002adc:	e001      	b.n	8002ae2 <I2SEx_TxISR_I2SExt+0x26>
 8002ade:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ae2:	460a      	mov	r2, r1
 8002ae4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d121      	bne.n	8002b42 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a12      	ldr	r2, [pc, #72]	@ (8002b4c <I2SEx_TxISR_I2SExt+0x90>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d101      	bne.n	8002b0c <I2SEx_TxISR_I2SExt+0x50>
 8002b08:	4b11      	ldr	r3, [pc, #68]	@ (8002b50 <I2SEx_TxISR_I2SExt+0x94>)
 8002b0a:	e001      	b.n	8002b10 <I2SEx_TxISR_I2SExt+0x54>
 8002b0c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	490d      	ldr	r1, [pc, #52]	@ (8002b4c <I2SEx_TxISR_I2SExt+0x90>)
 8002b18:	428b      	cmp	r3, r1
 8002b1a:	d101      	bne.n	8002b20 <I2SEx_TxISR_I2SExt+0x64>
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b50 <I2SEx_TxISR_I2SExt+0x94>)
 8002b1e:	e001      	b.n	8002b24 <I2SEx_TxISR_I2SExt+0x68>
 8002b20:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b24:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002b28:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d106      	bne.n	8002b42 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f7ff ff81 	bl	8002a44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b42:	bf00      	nop
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40003800 	.word	0x40003800
 8002b50:	40003400 	.word	0x40003400

08002b54 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68d8      	ldr	r0, [r3, #12]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b66:	1c99      	adds	r1, r3, #2
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002b6c:	b282      	uxth	r2, r0
 8002b6e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	3b01      	subs	r3, #1
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d113      	bne.n	8002bb0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002b96:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d106      	bne.n	8002bb0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7ff ff4a 	bl	8002a44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002bb0:	bf00      	nop
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a20      	ldr	r2, [pc, #128]	@ (8002c48 <I2SEx_RxISR_I2SExt+0x90>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d101      	bne.n	8002bce <I2SEx_RxISR_I2SExt+0x16>
 8002bca:	4b20      	ldr	r3, [pc, #128]	@ (8002c4c <I2SEx_RxISR_I2SExt+0x94>)
 8002bcc:	e001      	b.n	8002bd2 <I2SEx_RxISR_I2SExt+0x1a>
 8002bce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002bd2:	68d8      	ldr	r0, [r3, #12]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd8:	1c99      	adds	r1, r3, #2
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002bde:	b282      	uxth	r2, r0
 8002be0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d121      	bne.n	8002c3e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a12      	ldr	r2, [pc, #72]	@ (8002c48 <I2SEx_RxISR_I2SExt+0x90>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d101      	bne.n	8002c08 <I2SEx_RxISR_I2SExt+0x50>
 8002c04:	4b11      	ldr	r3, [pc, #68]	@ (8002c4c <I2SEx_RxISR_I2SExt+0x94>)
 8002c06:	e001      	b.n	8002c0c <I2SEx_RxISR_I2SExt+0x54>
 8002c08:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	490d      	ldr	r1, [pc, #52]	@ (8002c48 <I2SEx_RxISR_I2SExt+0x90>)
 8002c14:	428b      	cmp	r3, r1
 8002c16:	d101      	bne.n	8002c1c <I2SEx_RxISR_I2SExt+0x64>
 8002c18:	4b0c      	ldr	r3, [pc, #48]	@ (8002c4c <I2SEx_RxISR_I2SExt+0x94>)
 8002c1a:	e001      	b.n	8002c20 <I2SEx_RxISR_I2SExt+0x68>
 8002c1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c20:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002c24:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d106      	bne.n	8002c3e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7ff ff03 	bl	8002a44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c3e:	bf00      	nop
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40003800 	.word	0x40003800
 8002c4c:	40003400 	.word	0x40003400

08002c50 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af02      	add	r7, sp, #8
 8002c56:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e101      	b.n	8002e66 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d106      	bne.n	8002c82 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7fe f9d5 	bl	800102c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2203      	movs	r2, #3
 8002c86:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c90:	d102      	bne.n	8002c98 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f002 fb97 	bl	80053d0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6818      	ldr	r0, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	7c1a      	ldrb	r2, [r3, #16]
 8002caa:	f88d 2000 	strb.w	r2, [sp]
 8002cae:	3304      	adds	r3, #4
 8002cb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cb2:	f002 fb29 	bl	8005308 <USB_CoreInit>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e0ce      	b.n	8002e66 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2100      	movs	r1, #0
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f002 fb8f 	bl	80053f2 <USB_SetCurrentMode>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d005      	beq.n	8002ce6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2202      	movs	r2, #2
 8002cde:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e0bf      	b.n	8002e66 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	73fb      	strb	r3, [r7, #15]
 8002cea:	e04a      	b.n	8002d82 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002cec:	7bfa      	ldrb	r2, [r7, #15]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	3315      	adds	r3, #21
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d00:	7bfa      	ldrb	r2, [r7, #15]
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	4413      	add	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	3314      	adds	r3, #20
 8002d10:	7bfa      	ldrb	r2, [r7, #15]
 8002d12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d14:	7bfa      	ldrb	r2, [r7, #15]
 8002d16:	7bfb      	ldrb	r3, [r7, #15]
 8002d18:	b298      	uxth	r0, r3
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4413      	add	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	332e      	adds	r3, #46	@ 0x2e
 8002d28:	4602      	mov	r2, r0
 8002d2a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d2c:	7bfa      	ldrb	r2, [r7, #15]
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	4613      	mov	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	4413      	add	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	3318      	adds	r3, #24
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d40:	7bfa      	ldrb	r2, [r7, #15]
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4413      	add	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	331c      	adds	r3, #28
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d54:	7bfa      	ldrb	r2, [r7, #15]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	3320      	adds	r3, #32
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d68:	7bfa      	ldrb	r2, [r7, #15]
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	4413      	add	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	3324      	adds	r3, #36	@ 0x24
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	73fb      	strb	r3, [r7, #15]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	791b      	ldrb	r3, [r3, #4]
 8002d86:	7bfa      	ldrb	r2, [r7, #15]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d3af      	bcc.n	8002cec <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	73fb      	strb	r3, [r7, #15]
 8002d90:	e044      	b.n	8002e1c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d92:	7bfa      	ldrb	r2, [r7, #15]
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	4613      	mov	r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002da4:	2200      	movs	r2, #0
 8002da6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002da8:	7bfa      	ldrb	r2, [r7, #15]
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	4613      	mov	r3, r2
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	4413      	add	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002dba:	7bfa      	ldrb	r2, [r7, #15]
 8002dbc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002dbe:	7bfa      	ldrb	r2, [r7, #15]
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	4413      	add	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	440b      	add	r3, r1
 8002dcc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002dd4:	7bfa      	ldrb	r2, [r7, #15]
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	4413      	add	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002dea:	7bfa      	ldrb	r2, [r7, #15]
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	4613      	mov	r3, r2
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	4413      	add	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	440b      	add	r3, r1
 8002df8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e00:	7bfa      	ldrb	r2, [r7, #15]
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	4613      	mov	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4413      	add	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	73fb      	strb	r3, [r7, #15]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	791b      	ldrb	r3, [r3, #4]
 8002e20:	7bfa      	ldrb	r2, [r7, #15]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d3b5      	bcc.n	8002d92 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6818      	ldr	r0, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	7c1a      	ldrb	r2, [r3, #16]
 8002e2e:	f88d 2000 	strb.w	r2, [sp]
 8002e32:	3304      	adds	r3, #4
 8002e34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e36:	f002 fb29 	bl	800548c <USB_DevInit>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d005      	beq.n	8002e4c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e00c      	b.n	8002e66 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f002 fcf1 	bl	8005846 <USB_DevDisconnect>

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e267      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d075      	beq.n	8002f7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e8e:	4b88      	ldr	r3, [pc, #544]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 030c 	and.w	r3, r3, #12
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d00c      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e9a:	4b85      	ldr	r3, [pc, #532]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ea2:	2b08      	cmp	r3, #8
 8002ea4:	d112      	bne.n	8002ecc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ea6:	4b82      	ldr	r3, [pc, #520]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002eb2:	d10b      	bne.n	8002ecc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb4:	4b7e      	ldr	r3, [pc, #504]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d05b      	beq.n	8002f78 <HAL_RCC_OscConfig+0x108>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d157      	bne.n	8002f78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e242      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ed4:	d106      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x74>
 8002ed6:	4b76      	ldr	r3, [pc, #472]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a75      	ldr	r2, [pc, #468]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002edc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	e01d      	b.n	8002f20 <HAL_RCC_OscConfig+0xb0>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002eec:	d10c      	bne.n	8002f08 <HAL_RCC_OscConfig+0x98>
 8002eee:	4b70      	ldr	r3, [pc, #448]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a6f      	ldr	r2, [pc, #444]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	4b6d      	ldr	r3, [pc, #436]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a6c      	ldr	r2, [pc, #432]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	e00b      	b.n	8002f20 <HAL_RCC_OscConfig+0xb0>
 8002f08:	4b69      	ldr	r3, [pc, #420]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a68      	ldr	r2, [pc, #416]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f12:	6013      	str	r3, [r2, #0]
 8002f14:	4b66      	ldr	r3, [pc, #408]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a65      	ldr	r2, [pc, #404]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d013      	beq.n	8002f50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f28:	f7fe f9ca 	bl	80012c0 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f30:	f7fe f9c6 	bl	80012c0 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b64      	cmp	r3, #100	@ 0x64
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e207      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f42:	4b5b      	ldr	r3, [pc, #364]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0f0      	beq.n	8002f30 <HAL_RCC_OscConfig+0xc0>
 8002f4e:	e014      	b.n	8002f7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f50:	f7fe f9b6 	bl	80012c0 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f58:	f7fe f9b2 	bl	80012c0 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b64      	cmp	r3, #100	@ 0x64
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e1f3      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f6a:	4b51      	ldr	r3, [pc, #324]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0xe8>
 8002f76:	e000      	b.n	8002f7a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d063      	beq.n	800304e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f86:	4b4a      	ldr	r3, [pc, #296]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 030c 	and.w	r3, r3, #12
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00b      	beq.n	8002faa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f92:	4b47      	ldr	r3, [pc, #284]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	d11c      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f9e:	4b44      	ldr	r3, [pc, #272]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d116      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002faa:	4b41      	ldr	r3, [pc, #260]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d005      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x152>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d001      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e1c7      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc2:	4b3b      	ldr	r3, [pc, #236]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	4937      	ldr	r1, [pc, #220]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd6:	e03a      	b.n	800304e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d020      	beq.n	8003022 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fe0:	4b34      	ldr	r3, [pc, #208]	@ (80030b4 <HAL_RCC_OscConfig+0x244>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe6:	f7fe f96b 	bl	80012c0 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fee:	f7fe f967 	bl	80012c0 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e1a8      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003000:	4b2b      	ldr	r3, [pc, #172]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0f0      	beq.n	8002fee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800300c:	4b28      	ldr	r3, [pc, #160]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	4925      	ldr	r1, [pc, #148]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 800301c:	4313      	orrs	r3, r2
 800301e:	600b      	str	r3, [r1, #0]
 8003020:	e015      	b.n	800304e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003022:	4b24      	ldr	r3, [pc, #144]	@ (80030b4 <HAL_RCC_OscConfig+0x244>)
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003028:	f7fe f94a 	bl	80012c0 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003030:	f7fe f946 	bl	80012c0 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e187      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003042:	4b1b      	ldr	r3, [pc, #108]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b00      	cmp	r3, #0
 8003058:	d036      	beq.n	80030c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d016      	beq.n	8003090 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003062:	4b15      	ldr	r3, [pc, #84]	@ (80030b8 <HAL_RCC_OscConfig+0x248>)
 8003064:	2201      	movs	r2, #1
 8003066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003068:	f7fe f92a 	bl	80012c0 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003070:	f7fe f926 	bl	80012c0 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e167      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003082:	4b0b      	ldr	r3, [pc, #44]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8003084:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0f0      	beq.n	8003070 <HAL_RCC_OscConfig+0x200>
 800308e:	e01b      	b.n	80030c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003090:	4b09      	ldr	r3, [pc, #36]	@ (80030b8 <HAL_RCC_OscConfig+0x248>)
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003096:	f7fe f913 	bl	80012c0 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800309c:	e00e      	b.n	80030bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800309e:	f7fe f90f 	bl	80012c0 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d907      	bls.n	80030bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e150      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
 80030b0:	40023800 	.word	0x40023800
 80030b4:	42470000 	.word	0x42470000
 80030b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030bc:	4b88      	ldr	r3, [pc, #544]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 80030be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1ea      	bne.n	800309e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 8097 	beq.w	8003204 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030d6:	2300      	movs	r3, #0
 80030d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030da:	4b81      	ldr	r3, [pc, #516]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10f      	bne.n	8003106 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	60bb      	str	r3, [r7, #8]
 80030ea:	4b7d      	ldr	r3, [pc, #500]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ee:	4a7c      	ldr	r2, [pc, #496]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 80030f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80030f6:	4b7a      	ldr	r3, [pc, #488]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030fe:	60bb      	str	r3, [r7, #8]
 8003100:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003102:	2301      	movs	r3, #1
 8003104:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003106:	4b77      	ldr	r3, [pc, #476]	@ (80032e4 <HAL_RCC_OscConfig+0x474>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800310e:	2b00      	cmp	r3, #0
 8003110:	d118      	bne.n	8003144 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003112:	4b74      	ldr	r3, [pc, #464]	@ (80032e4 <HAL_RCC_OscConfig+0x474>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a73      	ldr	r2, [pc, #460]	@ (80032e4 <HAL_RCC_OscConfig+0x474>)
 8003118:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800311c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800311e:	f7fe f8cf 	bl	80012c0 <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003126:	f7fe f8cb 	bl	80012c0 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e10c      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003138:	4b6a      	ldr	r3, [pc, #424]	@ (80032e4 <HAL_RCC_OscConfig+0x474>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0f0      	beq.n	8003126 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d106      	bne.n	800315a <HAL_RCC_OscConfig+0x2ea>
 800314c:	4b64      	ldr	r3, [pc, #400]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 800314e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003150:	4a63      	ldr	r2, [pc, #396]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003152:	f043 0301 	orr.w	r3, r3, #1
 8003156:	6713      	str	r3, [r2, #112]	@ 0x70
 8003158:	e01c      	b.n	8003194 <HAL_RCC_OscConfig+0x324>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	2b05      	cmp	r3, #5
 8003160:	d10c      	bne.n	800317c <HAL_RCC_OscConfig+0x30c>
 8003162:	4b5f      	ldr	r3, [pc, #380]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003166:	4a5e      	ldr	r2, [pc, #376]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003168:	f043 0304 	orr.w	r3, r3, #4
 800316c:	6713      	str	r3, [r2, #112]	@ 0x70
 800316e:	4b5c      	ldr	r3, [pc, #368]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003172:	4a5b      	ldr	r2, [pc, #364]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	6713      	str	r3, [r2, #112]	@ 0x70
 800317a:	e00b      	b.n	8003194 <HAL_RCC_OscConfig+0x324>
 800317c:	4b58      	ldr	r3, [pc, #352]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 800317e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003180:	4a57      	ldr	r2, [pc, #348]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003182:	f023 0301 	bic.w	r3, r3, #1
 8003186:	6713      	str	r3, [r2, #112]	@ 0x70
 8003188:	4b55      	ldr	r3, [pc, #340]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800318c:	4a54      	ldr	r2, [pc, #336]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 800318e:	f023 0304 	bic.w	r3, r3, #4
 8003192:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d015      	beq.n	80031c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319c:	f7fe f890 	bl	80012c0 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a2:	e00a      	b.n	80031ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a4:	f7fe f88c 	bl	80012c0 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e0cb      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ba:	4b49      	ldr	r3, [pc, #292]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 80031bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0ee      	beq.n	80031a4 <HAL_RCC_OscConfig+0x334>
 80031c6:	e014      	b.n	80031f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c8:	f7fe f87a 	bl	80012c0 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ce:	e00a      	b.n	80031e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d0:	f7fe f876 	bl	80012c0 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031de:	4293      	cmp	r3, r2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e0b5      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e6:	4b3e      	ldr	r3, [pc, #248]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 80031e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1ee      	bne.n	80031d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031f2:	7dfb      	ldrb	r3, [r7, #23]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d105      	bne.n	8003204 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f8:	4b39      	ldr	r3, [pc, #228]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 80031fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fc:	4a38      	ldr	r2, [pc, #224]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 80031fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003202:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 80a1 	beq.w	8003350 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800320e:	4b34      	ldr	r3, [pc, #208]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 030c 	and.w	r3, r3, #12
 8003216:	2b08      	cmp	r3, #8
 8003218:	d05c      	beq.n	80032d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	2b02      	cmp	r3, #2
 8003220:	d141      	bne.n	80032a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003222:	4b31      	ldr	r3, [pc, #196]	@ (80032e8 <HAL_RCC_OscConfig+0x478>)
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003228:	f7fe f84a 	bl	80012c0 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003230:	f7fe f846 	bl	80012c0 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e087      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003242:	4b27      	ldr	r3, [pc, #156]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f0      	bne.n	8003230 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69da      	ldr	r2, [r3, #28]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325c:	019b      	lsls	r3, r3, #6
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003264:	085b      	lsrs	r3, r3, #1
 8003266:	3b01      	subs	r3, #1
 8003268:	041b      	lsls	r3, r3, #16
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003270:	061b      	lsls	r3, r3, #24
 8003272:	491b      	ldr	r1, [pc, #108]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003274:	4313      	orrs	r3, r2
 8003276:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003278:	4b1b      	ldr	r3, [pc, #108]	@ (80032e8 <HAL_RCC_OscConfig+0x478>)
 800327a:	2201      	movs	r2, #1
 800327c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327e:	f7fe f81f 	bl	80012c0 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003286:	f7fe f81b 	bl	80012c0 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e05c      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003298:	4b11      	ldr	r3, [pc, #68]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0f0      	beq.n	8003286 <HAL_RCC_OscConfig+0x416>
 80032a4:	e054      	b.n	8003350 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a6:	4b10      	ldr	r3, [pc, #64]	@ (80032e8 <HAL_RCC_OscConfig+0x478>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ac:	f7fe f808 	bl	80012c0 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b4:	f7fe f804 	bl	80012c0 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e045      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c6:	4b06      	ldr	r3, [pc, #24]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f0      	bne.n	80032b4 <HAL_RCC_OscConfig+0x444>
 80032d2:	e03d      	b.n	8003350 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d107      	bne.n	80032ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e038      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
 80032e0:	40023800 	.word	0x40023800
 80032e4:	40007000 	.word	0x40007000
 80032e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032ec:	4b1b      	ldr	r3, [pc, #108]	@ (800335c <HAL_RCC_OscConfig+0x4ec>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d028      	beq.n	800334c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003304:	429a      	cmp	r2, r3
 8003306:	d121      	bne.n	800334c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003312:	429a      	cmp	r2, r3
 8003314:	d11a      	bne.n	800334c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800331c:	4013      	ands	r3, r2
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003322:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003324:	4293      	cmp	r3, r2
 8003326:	d111      	bne.n	800334c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003332:	085b      	lsrs	r3, r3, #1
 8003334:	3b01      	subs	r3, #1
 8003336:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003338:	429a      	cmp	r2, r3
 800333a:	d107      	bne.n	800334c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003346:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003348:	429a      	cmp	r2, r3
 800334a:	d001      	beq.n	8003350 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e000      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	40023800 	.word	0x40023800

08003360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e0cc      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003374:	4b68      	ldr	r3, [pc, #416]	@ (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 030f 	and.w	r3, r3, #15
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d90c      	bls.n	800339c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003382:	4b65      	ldr	r3, [pc, #404]	@ (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800338a:	4b63      	ldr	r3, [pc, #396]	@ (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d001      	beq.n	800339c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e0b8      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d020      	beq.n	80033ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033b4:	4b59      	ldr	r3, [pc, #356]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	4a58      	ldr	r2, [pc, #352]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80033be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033cc:	4b53      	ldr	r3, [pc, #332]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	4a52      	ldr	r2, [pc, #328]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80033d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033d8:	4b50      	ldr	r3, [pc, #320]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	494d      	ldr	r1, [pc, #308]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d044      	beq.n	8003480 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d107      	bne.n	800340e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fe:	4b47      	ldr	r3, [pc, #284]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d119      	bne.n	800343e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e07f      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b02      	cmp	r3, #2
 8003414:	d003      	beq.n	800341e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800341a:	2b03      	cmp	r3, #3
 800341c:	d107      	bne.n	800342e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800341e:	4b3f      	ldr	r3, [pc, #252]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d109      	bne.n	800343e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e06f      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342e:	4b3b      	ldr	r3, [pc, #236]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e067      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800343e:	4b37      	ldr	r3, [pc, #220]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f023 0203 	bic.w	r2, r3, #3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	4934      	ldr	r1, [pc, #208]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 800344c:	4313      	orrs	r3, r2
 800344e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003450:	f7fd ff36 	bl	80012c0 <HAL_GetTick>
 8003454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003456:	e00a      	b.n	800346e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003458:	f7fd ff32 	bl	80012c0 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003466:	4293      	cmp	r3, r2
 8003468:	d901      	bls.n	800346e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e04f      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346e:	4b2b      	ldr	r3, [pc, #172]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 020c 	and.w	r2, r3, #12
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	429a      	cmp	r2, r3
 800347e:	d1eb      	bne.n	8003458 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003480:	4b25      	ldr	r3, [pc, #148]	@ (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d20c      	bcs.n	80034a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348e:	4b22      	ldr	r3, [pc, #136]	@ (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003496:	4b20      	ldr	r3, [pc, #128]	@ (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 030f 	and.w	r3, r3, #15
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d001      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e032      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d008      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034b4:	4b19      	ldr	r3, [pc, #100]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	4916      	ldr	r1, [pc, #88]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d009      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034d2:	4b12      	ldr	r3, [pc, #72]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	490e      	ldr	r1, [pc, #56]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034e6:	f000 f821 	bl	800352c <HAL_RCC_GetSysClockFreq>
 80034ea:	4602      	mov	r2, r0
 80034ec:	4b0b      	ldr	r3, [pc, #44]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	091b      	lsrs	r3, r3, #4
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	490a      	ldr	r1, [pc, #40]	@ (8003520 <HAL_RCC_ClockConfig+0x1c0>)
 80034f8:	5ccb      	ldrb	r3, [r1, r3]
 80034fa:	fa22 f303 	lsr.w	r3, r2, r3
 80034fe:	4a09      	ldr	r2, [pc, #36]	@ (8003524 <HAL_RCC_ClockConfig+0x1c4>)
 8003500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003502:	4b09      	ldr	r3, [pc, #36]	@ (8003528 <HAL_RCC_ClockConfig+0x1c8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f7fd fe96 	bl	8001238 <HAL_InitTick>

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40023c00 	.word	0x40023c00
 800351c:	40023800 	.word	0x40023800
 8003520:	08005978 	.word	0x08005978
 8003524:	20027050 	.word	0x20027050
 8003528:	20027054 	.word	0x20027054

0800352c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800352c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003530:	b094      	sub	sp, #80	@ 0x50
 8003532:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003534:	2300      	movs	r3, #0
 8003536:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003544:	4b79      	ldr	r3, [pc, #484]	@ (800372c <HAL_RCC_GetSysClockFreq+0x200>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 030c 	and.w	r3, r3, #12
 800354c:	2b08      	cmp	r3, #8
 800354e:	d00d      	beq.n	800356c <HAL_RCC_GetSysClockFreq+0x40>
 8003550:	2b08      	cmp	r3, #8
 8003552:	f200 80e1 	bhi.w	8003718 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003556:	2b00      	cmp	r3, #0
 8003558:	d002      	beq.n	8003560 <HAL_RCC_GetSysClockFreq+0x34>
 800355a:	2b04      	cmp	r3, #4
 800355c:	d003      	beq.n	8003566 <HAL_RCC_GetSysClockFreq+0x3a>
 800355e:	e0db      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003560:	4b73      	ldr	r3, [pc, #460]	@ (8003730 <HAL_RCC_GetSysClockFreq+0x204>)
 8003562:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003564:	e0db      	b.n	800371e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003566:	4b73      	ldr	r3, [pc, #460]	@ (8003734 <HAL_RCC_GetSysClockFreq+0x208>)
 8003568:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800356a:	e0d8      	b.n	800371e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800356c:	4b6f      	ldr	r3, [pc, #444]	@ (800372c <HAL_RCC_GetSysClockFreq+0x200>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003574:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003576:	4b6d      	ldr	r3, [pc, #436]	@ (800372c <HAL_RCC_GetSysClockFreq+0x200>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d063      	beq.n	800364a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003582:	4b6a      	ldr	r3, [pc, #424]	@ (800372c <HAL_RCC_GetSysClockFreq+0x200>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	099b      	lsrs	r3, r3, #6
 8003588:	2200      	movs	r2, #0
 800358a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800358c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800358e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003594:	633b      	str	r3, [r7, #48]	@ 0x30
 8003596:	2300      	movs	r3, #0
 8003598:	637b      	str	r3, [r7, #52]	@ 0x34
 800359a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800359e:	4622      	mov	r2, r4
 80035a0:	462b      	mov	r3, r5
 80035a2:	f04f 0000 	mov.w	r0, #0
 80035a6:	f04f 0100 	mov.w	r1, #0
 80035aa:	0159      	lsls	r1, r3, #5
 80035ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035b0:	0150      	lsls	r0, r2, #5
 80035b2:	4602      	mov	r2, r0
 80035b4:	460b      	mov	r3, r1
 80035b6:	4621      	mov	r1, r4
 80035b8:	1a51      	subs	r1, r2, r1
 80035ba:	6139      	str	r1, [r7, #16]
 80035bc:	4629      	mov	r1, r5
 80035be:	eb63 0301 	sbc.w	r3, r3, r1
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035d0:	4659      	mov	r1, fp
 80035d2:	018b      	lsls	r3, r1, #6
 80035d4:	4651      	mov	r1, sl
 80035d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035da:	4651      	mov	r1, sl
 80035dc:	018a      	lsls	r2, r1, #6
 80035de:	4651      	mov	r1, sl
 80035e0:	ebb2 0801 	subs.w	r8, r2, r1
 80035e4:	4659      	mov	r1, fp
 80035e6:	eb63 0901 	sbc.w	r9, r3, r1
 80035ea:	f04f 0200 	mov.w	r2, #0
 80035ee:	f04f 0300 	mov.w	r3, #0
 80035f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035fe:	4690      	mov	r8, r2
 8003600:	4699      	mov	r9, r3
 8003602:	4623      	mov	r3, r4
 8003604:	eb18 0303 	adds.w	r3, r8, r3
 8003608:	60bb      	str	r3, [r7, #8]
 800360a:	462b      	mov	r3, r5
 800360c:	eb49 0303 	adc.w	r3, r9, r3
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800361e:	4629      	mov	r1, r5
 8003620:	024b      	lsls	r3, r1, #9
 8003622:	4621      	mov	r1, r4
 8003624:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003628:	4621      	mov	r1, r4
 800362a:	024a      	lsls	r2, r1, #9
 800362c:	4610      	mov	r0, r2
 800362e:	4619      	mov	r1, r3
 8003630:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003632:	2200      	movs	r2, #0
 8003634:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003636:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003638:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800363c:	f7fc fdd6 	bl	80001ec <__aeabi_uldivmod>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	4613      	mov	r3, r2
 8003646:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003648:	e058      	b.n	80036fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800364a:	4b38      	ldr	r3, [pc, #224]	@ (800372c <HAL_RCC_GetSysClockFreq+0x200>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	099b      	lsrs	r3, r3, #6
 8003650:	2200      	movs	r2, #0
 8003652:	4618      	mov	r0, r3
 8003654:	4611      	mov	r1, r2
 8003656:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800365a:	623b      	str	r3, [r7, #32]
 800365c:	2300      	movs	r3, #0
 800365e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003660:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003664:	4642      	mov	r2, r8
 8003666:	464b      	mov	r3, r9
 8003668:	f04f 0000 	mov.w	r0, #0
 800366c:	f04f 0100 	mov.w	r1, #0
 8003670:	0159      	lsls	r1, r3, #5
 8003672:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003676:	0150      	lsls	r0, r2, #5
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4641      	mov	r1, r8
 800367e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003682:	4649      	mov	r1, r9
 8003684:	eb63 0b01 	sbc.w	fp, r3, r1
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	f04f 0300 	mov.w	r3, #0
 8003690:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003694:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003698:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800369c:	ebb2 040a 	subs.w	r4, r2, sl
 80036a0:	eb63 050b 	sbc.w	r5, r3, fp
 80036a4:	f04f 0200 	mov.w	r2, #0
 80036a8:	f04f 0300 	mov.w	r3, #0
 80036ac:	00eb      	lsls	r3, r5, #3
 80036ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036b2:	00e2      	lsls	r2, r4, #3
 80036b4:	4614      	mov	r4, r2
 80036b6:	461d      	mov	r5, r3
 80036b8:	4643      	mov	r3, r8
 80036ba:	18e3      	adds	r3, r4, r3
 80036bc:	603b      	str	r3, [r7, #0]
 80036be:	464b      	mov	r3, r9
 80036c0:	eb45 0303 	adc.w	r3, r5, r3
 80036c4:	607b      	str	r3, [r7, #4]
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036d2:	4629      	mov	r1, r5
 80036d4:	028b      	lsls	r3, r1, #10
 80036d6:	4621      	mov	r1, r4
 80036d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036dc:	4621      	mov	r1, r4
 80036de:	028a      	lsls	r2, r1, #10
 80036e0:	4610      	mov	r0, r2
 80036e2:	4619      	mov	r1, r3
 80036e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036e6:	2200      	movs	r2, #0
 80036e8:	61bb      	str	r3, [r7, #24]
 80036ea:	61fa      	str	r2, [r7, #28]
 80036ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036f0:	f7fc fd7c 	bl	80001ec <__aeabi_uldivmod>
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	4613      	mov	r3, r2
 80036fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80036fc:	4b0b      	ldr	r3, [pc, #44]	@ (800372c <HAL_RCC_GetSysClockFreq+0x200>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	0c1b      	lsrs	r3, r3, #16
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	3301      	adds	r3, #1
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800370c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800370e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003710:	fbb2 f3f3 	udiv	r3, r2, r3
 8003714:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003716:	e002      	b.n	800371e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003718:	4b05      	ldr	r3, [pc, #20]	@ (8003730 <HAL_RCC_GetSysClockFreq+0x204>)
 800371a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800371c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800371e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003720:	4618      	mov	r0, r3
 8003722:	3750      	adds	r7, #80	@ 0x50
 8003724:	46bd      	mov	sp, r7
 8003726:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800372a:	bf00      	nop
 800372c:	40023800 	.word	0x40023800
 8003730:	00f42400 	.word	0x00f42400
 8003734:	007a1200 	.word	0x007a1200

08003738 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800373c:	4b03      	ldr	r3, [pc, #12]	@ (800374c <HAL_RCC_GetHCLKFreq+0x14>)
 800373e:	681b      	ldr	r3, [r3, #0]
}
 8003740:	4618      	mov	r0, r3
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	20027050 	.word	0x20027050

08003750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003754:	f7ff fff0 	bl	8003738 <HAL_RCC_GetHCLKFreq>
 8003758:	4602      	mov	r2, r0
 800375a:	4b05      	ldr	r3, [pc, #20]	@ (8003770 <HAL_RCC_GetPCLK1Freq+0x20>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	0a9b      	lsrs	r3, r3, #10
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	4903      	ldr	r1, [pc, #12]	@ (8003774 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003766:	5ccb      	ldrb	r3, [r1, r3]
 8003768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800376c:	4618      	mov	r0, r3
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40023800 	.word	0x40023800
 8003774:	08005988 	.word	0x08005988

08003778 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800377c:	f7ff ffdc 	bl	8003738 <HAL_RCC_GetHCLKFreq>
 8003780:	4602      	mov	r2, r0
 8003782:	4b05      	ldr	r3, [pc, #20]	@ (8003798 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	0b5b      	lsrs	r3, r3, #13
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	4903      	ldr	r1, [pc, #12]	@ (800379c <HAL_RCC_GetPCLK2Freq+0x24>)
 800378e:	5ccb      	ldrb	r3, [r1, r3]
 8003790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003794:	4618      	mov	r0, r3
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40023800 	.word	0x40023800
 800379c:	08005988 	.word	0x08005988

080037a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10b      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d105      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d075      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80037d4:	4b91      	ldr	r3, [pc, #580]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80037da:	f7fd fd71 	bl	80012c0 <HAL_GetTick>
 80037de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037e0:	e008      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037e2:	f7fd fd6d 	bl	80012c0 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e189      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037f4:	4b8a      	ldr	r3, [pc, #552]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1f0      	bne.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b00      	cmp	r3, #0
 800380a:	d009      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	019a      	lsls	r2, r3, #6
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	071b      	lsls	r3, r3, #28
 8003818:	4981      	ldr	r1, [pc, #516]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800381a:	4313      	orrs	r3, r2
 800381c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d01f      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800382c:	4b7c      	ldr	r3, [pc, #496]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800382e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003832:	0f1b      	lsrs	r3, r3, #28
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	019a      	lsls	r2, r3, #6
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	061b      	lsls	r3, r3, #24
 8003846:	431a      	orrs	r2, r3
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	071b      	lsls	r3, r3, #28
 800384c:	4974      	ldr	r1, [pc, #464]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800384e:	4313      	orrs	r3, r2
 8003850:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003854:	4b72      	ldr	r3, [pc, #456]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003856:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800385a:	f023 021f 	bic.w	r2, r3, #31
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	3b01      	subs	r3, #1
 8003864:	496e      	ldr	r1, [pc, #440]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003866:	4313      	orrs	r3, r2
 8003868:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00d      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	019a      	lsls	r2, r3, #6
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	061b      	lsls	r3, r3, #24
 8003884:	431a      	orrs	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	071b      	lsls	r3, r3, #28
 800388c:	4964      	ldr	r1, [pc, #400]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800388e:	4313      	orrs	r3, r2
 8003890:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003894:	4b61      	ldr	r3, [pc, #388]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003896:	2201      	movs	r2, #1
 8003898:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800389a:	f7fd fd11 	bl	80012c0 <HAL_GetTick>
 800389e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038a0:	e008      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038a2:	f7fd fd0d 	bl	80012c0 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e129      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038b4:	4b5a      	ldr	r3, [pc, #360]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0f0      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d105      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d079      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80038d8:	4b52      	ldr	r3, [pc, #328]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038de:	f7fd fcef 	bl	80012c0 <HAL_GetTick>
 80038e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038e4:	e008      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038e6:	f7fd fceb 	bl	80012c0 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e107      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038f8:	4b49      	ldr	r3, [pc, #292]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003900:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003904:	d0ef      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0304 	and.w	r3, r3, #4
 800390e:	2b00      	cmp	r3, #0
 8003910:	d020      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003912:	4b43      	ldr	r3, [pc, #268]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003914:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003918:	0f1b      	lsrs	r3, r3, #28
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	019a      	lsls	r2, r3, #6
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	061b      	lsls	r3, r3, #24
 800392c:	431a      	orrs	r2, r3
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	071b      	lsls	r3, r3, #28
 8003932:	493b      	ldr	r1, [pc, #236]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003934:	4313      	orrs	r3, r2
 8003936:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800393a:	4b39      	ldr	r3, [pc, #228]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800393c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003940:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	3b01      	subs	r3, #1
 800394a:	021b      	lsls	r3, r3, #8
 800394c:	4934      	ldr	r1, [pc, #208]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800394e:	4313      	orrs	r3, r2
 8003950:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	2b00      	cmp	r3, #0
 800395e:	d01e      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003960:	4b2f      	ldr	r3, [pc, #188]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003966:	0e1b      	lsrs	r3, r3, #24
 8003968:	f003 030f 	and.w	r3, r3, #15
 800396c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	019a      	lsls	r2, r3, #6
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	061b      	lsls	r3, r3, #24
 8003978:	431a      	orrs	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	071b      	lsls	r3, r3, #28
 8003980:	4927      	ldr	r1, [pc, #156]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003982:	4313      	orrs	r3, r2
 8003984:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003988:	4b25      	ldr	r3, [pc, #148]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800398a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800398e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003996:	4922      	ldr	r1, [pc, #136]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800399e:	4b21      	ldr	r3, [pc, #132]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80039a0:	2201      	movs	r2, #1
 80039a2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039a4:	f7fd fc8c 	bl	80012c0 <HAL_GetTick>
 80039a8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039aa:	e008      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039ac:	f7fd fc88 	bl	80012c0 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e0a4      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039be:	4b18      	ldr	r3, [pc, #96]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039ca:	d1ef      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0320 	and.w	r3, r3, #32
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 808b 	beq.w	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80039da:	2300      	movs	r3, #0
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	4b10      	ldr	r3, [pc, #64]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e2:	4a0f      	ldr	r2, [pc, #60]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80039ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80039f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a0b      	ldr	r2, [pc, #44]	@ (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80039fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a00:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a02:	f7fd fc5d 	bl	80012c0 <HAL_GetTick>
 8003a06:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003a08:	e010      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a0a:	f7fd fc59 	bl	80012c0 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d909      	bls.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e075      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003a1c:	42470068 	.word	0x42470068
 8003a20:	40023800 	.word	0x40023800
 8003a24:	42470070 	.word	0x42470070
 8003a28:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003a2c:	4b38      	ldr	r3, [pc, #224]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0e8      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a38:	4b36      	ldr	r3, [pc, #216]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a40:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d02f      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d028      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a56:	4b2f      	ldr	r3, [pc, #188]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a5e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a60:	4b2d      	ldr	r3, [pc, #180]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003a62:	2201      	movs	r2, #1
 8003a64:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a66:	4b2c      	ldr	r3, [pc, #176]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003a6c:	4a29      	ldr	r2, [pc, #164]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a72:	4b28      	ldr	r3, [pc, #160]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d114      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003a7e:	f7fd fc1f 	bl	80012c0 <HAL_GetTick>
 8003a82:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a84:	e00a      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a86:	f7fd fc1b 	bl	80012c0 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e035      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0ee      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ab0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ab4:	d10d      	bne.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003ab6:	4b17      	ldr	r3, [pc, #92]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003ac6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aca:	4912      	ldr	r1, [pc, #72]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	608b      	str	r3, [r1, #8]
 8003ad0:	e005      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003ad2:	4b10      	ldr	r3, [pc, #64]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	4a0f      	ldr	r2, [pc, #60]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ad8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003adc:	6093      	str	r3, [r2, #8]
 8003ade:	4b0d      	ldr	r3, [pc, #52]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ae0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aea:	490a      	ldr	r1, [pc, #40]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0310 	and.w	r3, r3, #16
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d004      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8003b02:	4b06      	ldr	r3, [pc, #24]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003b04:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40007000 	.word	0x40007000
 8003b14:	40023800 	.word	0x40023800
 8003b18:	42470e40 	.word	0x42470e40
 8003b1c:	424711e0 	.word	0x424711e0

08003b20 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d13f      	bne.n	8003bbe <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003b3e:	4b24      	ldr	r3, [pc, #144]	@ (8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d006      	beq.n	8003b5c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b54:	d12f      	bne.n	8003bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003b56:	4b1f      	ldr	r3, [pc, #124]	@ (8003bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003b58:	617b      	str	r3, [r7, #20]
          break;
 8003b5a:	e02f      	b.n	8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003b5c:	4b1c      	ldr	r3, [pc, #112]	@ (8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b68:	d108      	bne.n	8003b7c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b6a:	4b19      	ldr	r3, [pc, #100]	@ (8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b72:	4a19      	ldr	r2, [pc, #100]	@ (8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b78:	613b      	str	r3, [r7, #16]
 8003b7a:	e007      	b.n	8003b8c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b7c:	4b14      	ldr	r3, [pc, #80]	@ (8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b84:	4a15      	ldr	r2, [pc, #84]	@ (8003bdc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8a:	613b      	str	r3, [r7, #16]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003b8c:	4b10      	ldr	r3, [pc, #64]	@ (8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003b8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b92:	099b      	lsrs	r3, r3, #6
 8003b94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	fb02 f303 	mul.w	r3, r2, r3
 8003b9e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ba6:	0f1b      	lsrs	r3, r3, #28
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb2:	617b      	str	r3, [r7, #20]
          break;
 8003bb4:	e002      	b.n	8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]
          break;
 8003bba:	bf00      	nop
        }
      }
      break;
 8003bbc:	e000      	b.n	8003bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8003bbe:	bf00      	nop
    }
  }
  return frequency;
 8003bc0:	697b      	ldr	r3, [r7, #20]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	371c      	adds	r7, #28
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	00bb8000 	.word	0x00bb8000
 8003bd8:	007a1200 	.word	0x007a1200
 8003bdc:	00f42400 	.word	0x00f42400

08003be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e041      	b.n	8003c76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d106      	bne.n	8003c0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7fd f93e 	bl	8000e88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4610      	mov	r0, r2
 8003c20:	f000 fa7e 	bl	8004120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
	...

08003c80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d001      	beq.n	8003c98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e04e      	b.n	8003d36 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0201 	orr.w	r2, r2, #1
 8003cae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a23      	ldr	r2, [pc, #140]	@ (8003d44 <HAL_TIM_Base_Start_IT+0xc4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d022      	beq.n	8003d00 <HAL_TIM_Base_Start_IT+0x80>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cc2:	d01d      	beq.n	8003d00 <HAL_TIM_Base_Start_IT+0x80>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a1f      	ldr	r2, [pc, #124]	@ (8003d48 <HAL_TIM_Base_Start_IT+0xc8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d018      	beq.n	8003d00 <HAL_TIM_Base_Start_IT+0x80>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a1e      	ldr	r2, [pc, #120]	@ (8003d4c <HAL_TIM_Base_Start_IT+0xcc>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d013      	beq.n	8003d00 <HAL_TIM_Base_Start_IT+0x80>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a1c      	ldr	r2, [pc, #112]	@ (8003d50 <HAL_TIM_Base_Start_IT+0xd0>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d00e      	beq.n	8003d00 <HAL_TIM_Base_Start_IT+0x80>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a1b      	ldr	r2, [pc, #108]	@ (8003d54 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d009      	beq.n	8003d00 <HAL_TIM_Base_Start_IT+0x80>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a19      	ldr	r2, [pc, #100]	@ (8003d58 <HAL_TIM_Base_Start_IT+0xd8>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d004      	beq.n	8003d00 <HAL_TIM_Base_Start_IT+0x80>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a18      	ldr	r2, [pc, #96]	@ (8003d5c <HAL_TIM_Base_Start_IT+0xdc>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d111      	bne.n	8003d24 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2b06      	cmp	r3, #6
 8003d10:	d010      	beq.n	8003d34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0201 	orr.w	r2, r2, #1
 8003d20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d22:	e007      	b.n	8003d34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0201 	orr.w	r2, r2, #1
 8003d32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	40010000 	.word	0x40010000
 8003d48:	40000400 	.word	0x40000400
 8003d4c:	40000800 	.word	0x40000800
 8003d50:	40000c00 	.word	0x40000c00
 8003d54:	40010400 	.word	0x40010400
 8003d58:	40014000 	.word	0x40014000
 8003d5c:	40001800 	.word	0x40001800

08003d60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d020      	beq.n	8003dc4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d01b      	beq.n	8003dc4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f06f 0202 	mvn.w	r2, #2
 8003d94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f999 	bl	80040e2 <HAL_TIM_IC_CaptureCallback>
 8003db0:	e005      	b.n	8003dbe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f98b 	bl	80040ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f99c 	bl	80040f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d020      	beq.n	8003e10 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d01b      	beq.n	8003e10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f06f 0204 	mvn.w	r2, #4
 8003de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2202      	movs	r2, #2
 8003de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f973 	bl	80040e2 <HAL_TIM_IC_CaptureCallback>
 8003dfc:	e005      	b.n	8003e0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f965 	bl	80040ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f976 	bl	80040f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d020      	beq.n	8003e5c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d01b      	beq.n	8003e5c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f06f 0208 	mvn.w	r2, #8
 8003e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2204      	movs	r2, #4
 8003e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f94d 	bl	80040e2 <HAL_TIM_IC_CaptureCallback>
 8003e48:	e005      	b.n	8003e56 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f93f 	bl	80040ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f950 	bl	80040f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f003 0310 	and.w	r3, r3, #16
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d020      	beq.n	8003ea8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f003 0310 	and.w	r3, r3, #16
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d01b      	beq.n	8003ea8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f06f 0210 	mvn.w	r2, #16
 8003e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2208      	movs	r2, #8
 8003e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f927 	bl	80040e2 <HAL_TIM_IC_CaptureCallback>
 8003e94:	e005      	b.n	8003ea2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f919 	bl	80040ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f92a 	bl	80040f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00c      	beq.n	8003ecc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d007      	beq.n	8003ecc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f06f 0201 	mvn.w	r2, #1
 8003ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7fc fb08 	bl	80004dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00c      	beq.n	8003ef0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d007      	beq.n	8003ef0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 fae4 	bl	80044b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00c      	beq.n	8003f14 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d007      	beq.n	8003f14 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f8fb 	bl	800410a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f003 0320 	and.w	r3, r3, #32
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00c      	beq.n	8003f38 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f003 0320 	and.w	r3, r3, #32
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d007      	beq.n	8003f38 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f06f 0220 	mvn.w	r2, #32
 8003f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 fab6 	bl	80044a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f38:	bf00      	nop
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d101      	bne.n	8003f5c <HAL_TIM_ConfigClockSource+0x1c>
 8003f58:	2302      	movs	r3, #2
 8003f5a:	e0b4      	b.n	80040c6 <HAL_TIM_ConfigClockSource+0x186>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003f7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f94:	d03e      	beq.n	8004014 <HAL_TIM_ConfigClockSource+0xd4>
 8003f96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f9a:	f200 8087 	bhi.w	80040ac <HAL_TIM_ConfigClockSource+0x16c>
 8003f9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fa2:	f000 8086 	beq.w	80040b2 <HAL_TIM_ConfigClockSource+0x172>
 8003fa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003faa:	d87f      	bhi.n	80040ac <HAL_TIM_ConfigClockSource+0x16c>
 8003fac:	2b70      	cmp	r3, #112	@ 0x70
 8003fae:	d01a      	beq.n	8003fe6 <HAL_TIM_ConfigClockSource+0xa6>
 8003fb0:	2b70      	cmp	r3, #112	@ 0x70
 8003fb2:	d87b      	bhi.n	80040ac <HAL_TIM_ConfigClockSource+0x16c>
 8003fb4:	2b60      	cmp	r3, #96	@ 0x60
 8003fb6:	d050      	beq.n	800405a <HAL_TIM_ConfigClockSource+0x11a>
 8003fb8:	2b60      	cmp	r3, #96	@ 0x60
 8003fba:	d877      	bhi.n	80040ac <HAL_TIM_ConfigClockSource+0x16c>
 8003fbc:	2b50      	cmp	r3, #80	@ 0x50
 8003fbe:	d03c      	beq.n	800403a <HAL_TIM_ConfigClockSource+0xfa>
 8003fc0:	2b50      	cmp	r3, #80	@ 0x50
 8003fc2:	d873      	bhi.n	80040ac <HAL_TIM_ConfigClockSource+0x16c>
 8003fc4:	2b40      	cmp	r3, #64	@ 0x40
 8003fc6:	d058      	beq.n	800407a <HAL_TIM_ConfigClockSource+0x13a>
 8003fc8:	2b40      	cmp	r3, #64	@ 0x40
 8003fca:	d86f      	bhi.n	80040ac <HAL_TIM_ConfigClockSource+0x16c>
 8003fcc:	2b30      	cmp	r3, #48	@ 0x30
 8003fce:	d064      	beq.n	800409a <HAL_TIM_ConfigClockSource+0x15a>
 8003fd0:	2b30      	cmp	r3, #48	@ 0x30
 8003fd2:	d86b      	bhi.n	80040ac <HAL_TIM_ConfigClockSource+0x16c>
 8003fd4:	2b20      	cmp	r3, #32
 8003fd6:	d060      	beq.n	800409a <HAL_TIM_ConfigClockSource+0x15a>
 8003fd8:	2b20      	cmp	r3, #32
 8003fda:	d867      	bhi.n	80040ac <HAL_TIM_ConfigClockSource+0x16c>
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d05c      	beq.n	800409a <HAL_TIM_ConfigClockSource+0x15a>
 8003fe0:	2b10      	cmp	r3, #16
 8003fe2:	d05a      	beq.n	800409a <HAL_TIM_ConfigClockSource+0x15a>
 8003fe4:	e062      	b.n	80040ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ff6:	f000 f9b9 	bl	800436c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004008:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	609a      	str	r2, [r3, #8]
      break;
 8004012:	e04f      	b.n	80040b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004024:	f000 f9a2 	bl	800436c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689a      	ldr	r2, [r3, #8]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004036:	609a      	str	r2, [r3, #8]
      break;
 8004038:	e03c      	b.n	80040b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004046:	461a      	mov	r2, r3
 8004048:	f000 f916 	bl	8004278 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2150      	movs	r1, #80	@ 0x50
 8004052:	4618      	mov	r0, r3
 8004054:	f000 f96f 	bl	8004336 <TIM_ITRx_SetConfig>
      break;
 8004058:	e02c      	b.n	80040b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004066:	461a      	mov	r2, r3
 8004068:	f000 f935 	bl	80042d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2160      	movs	r1, #96	@ 0x60
 8004072:	4618      	mov	r0, r3
 8004074:	f000 f95f 	bl	8004336 <TIM_ITRx_SetConfig>
      break;
 8004078:	e01c      	b.n	80040b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004086:	461a      	mov	r2, r3
 8004088:	f000 f8f6 	bl	8004278 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2140      	movs	r1, #64	@ 0x40
 8004092:	4618      	mov	r0, r3
 8004094:	f000 f94f 	bl	8004336 <TIM_ITRx_SetConfig>
      break;
 8004098:	e00c      	b.n	80040b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4619      	mov	r1, r3
 80040a4:	4610      	mov	r0, r2
 80040a6:	f000 f946 	bl	8004336 <TIM_ITRx_SetConfig>
      break;
 80040aa:	e003      	b.n	80040b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	73fb      	strb	r3, [r7, #15]
      break;
 80040b0:	e000      	b.n	80040b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b083      	sub	sp, #12
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800410a:	b480      	push	{r7}
 800410c:	b083      	sub	sp, #12
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004112:	bf00      	nop
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
	...

08004120 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a46      	ldr	r2, [pc, #280]	@ (800424c <TIM_Base_SetConfig+0x12c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d013      	beq.n	8004160 <TIM_Base_SetConfig+0x40>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800413e:	d00f      	beq.n	8004160 <TIM_Base_SetConfig+0x40>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a43      	ldr	r2, [pc, #268]	@ (8004250 <TIM_Base_SetConfig+0x130>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d00b      	beq.n	8004160 <TIM_Base_SetConfig+0x40>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a42      	ldr	r2, [pc, #264]	@ (8004254 <TIM_Base_SetConfig+0x134>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d007      	beq.n	8004160 <TIM_Base_SetConfig+0x40>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a41      	ldr	r2, [pc, #260]	@ (8004258 <TIM_Base_SetConfig+0x138>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d003      	beq.n	8004160 <TIM_Base_SetConfig+0x40>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a40      	ldr	r2, [pc, #256]	@ (800425c <TIM_Base_SetConfig+0x13c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d108      	bne.n	8004172 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004166:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	4313      	orrs	r3, r2
 8004170:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a35      	ldr	r2, [pc, #212]	@ (800424c <TIM_Base_SetConfig+0x12c>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d02b      	beq.n	80041d2 <TIM_Base_SetConfig+0xb2>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004180:	d027      	beq.n	80041d2 <TIM_Base_SetConfig+0xb2>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a32      	ldr	r2, [pc, #200]	@ (8004250 <TIM_Base_SetConfig+0x130>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d023      	beq.n	80041d2 <TIM_Base_SetConfig+0xb2>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a31      	ldr	r2, [pc, #196]	@ (8004254 <TIM_Base_SetConfig+0x134>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d01f      	beq.n	80041d2 <TIM_Base_SetConfig+0xb2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a30      	ldr	r2, [pc, #192]	@ (8004258 <TIM_Base_SetConfig+0x138>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d01b      	beq.n	80041d2 <TIM_Base_SetConfig+0xb2>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a2f      	ldr	r2, [pc, #188]	@ (800425c <TIM_Base_SetConfig+0x13c>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d017      	beq.n	80041d2 <TIM_Base_SetConfig+0xb2>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a2e      	ldr	r2, [pc, #184]	@ (8004260 <TIM_Base_SetConfig+0x140>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d013      	beq.n	80041d2 <TIM_Base_SetConfig+0xb2>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a2d      	ldr	r2, [pc, #180]	@ (8004264 <TIM_Base_SetConfig+0x144>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d00f      	beq.n	80041d2 <TIM_Base_SetConfig+0xb2>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a2c      	ldr	r2, [pc, #176]	@ (8004268 <TIM_Base_SetConfig+0x148>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d00b      	beq.n	80041d2 <TIM_Base_SetConfig+0xb2>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a2b      	ldr	r2, [pc, #172]	@ (800426c <TIM_Base_SetConfig+0x14c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d007      	beq.n	80041d2 <TIM_Base_SetConfig+0xb2>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a2a      	ldr	r2, [pc, #168]	@ (8004270 <TIM_Base_SetConfig+0x150>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d003      	beq.n	80041d2 <TIM_Base_SetConfig+0xb2>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a29      	ldr	r2, [pc, #164]	@ (8004274 <TIM_Base_SetConfig+0x154>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d108      	bne.n	80041e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a10      	ldr	r2, [pc, #64]	@ (800424c <TIM_Base_SetConfig+0x12c>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d003      	beq.n	8004218 <TIM_Base_SetConfig+0xf8>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a12      	ldr	r2, [pc, #72]	@ (800425c <TIM_Base_SetConfig+0x13c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d103      	bne.n	8004220 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b01      	cmp	r3, #1
 8004230:	d105      	bne.n	800423e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	f023 0201 	bic.w	r2, r3, #1
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	611a      	str	r2, [r3, #16]
  }
}
 800423e:	bf00      	nop
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	40010000 	.word	0x40010000
 8004250:	40000400 	.word	0x40000400
 8004254:	40000800 	.word	0x40000800
 8004258:	40000c00 	.word	0x40000c00
 800425c:	40010400 	.word	0x40010400
 8004260:	40014000 	.word	0x40014000
 8004264:	40014400 	.word	0x40014400
 8004268:	40014800 	.word	0x40014800
 800426c:	40001800 	.word	0x40001800
 8004270:	40001c00 	.word	0x40001c00
 8004274:	40002000 	.word	0x40002000

08004278 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	f023 0201 	bic.w	r2, r3, #1
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f023 030a 	bic.w	r3, r3, #10
 80042b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	621a      	str	r2, [r3, #32]
}
 80042ca:	bf00      	nop
 80042cc:	371c      	adds	r7, #28
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b087      	sub	sp, #28
 80042da:	af00      	add	r7, sp, #0
 80042dc:	60f8      	str	r0, [r7, #12]
 80042de:	60b9      	str	r1, [r7, #8]
 80042e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	f023 0210 	bic.w	r2, r3, #16
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004300:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	031b      	lsls	r3, r3, #12
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	4313      	orrs	r3, r2
 800430a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004312:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	4313      	orrs	r3, r2
 800431c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	621a      	str	r2, [r3, #32]
}
 800432a:	bf00      	nop
 800432c:	371c      	adds	r7, #28
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004336:	b480      	push	{r7}
 8004338:	b085      	sub	sp, #20
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800434c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4313      	orrs	r3, r2
 8004354:	f043 0307 	orr.w	r3, r3, #7
 8004358:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	609a      	str	r2, [r3, #8]
}
 8004360:	bf00      	nop
 8004362:	3714      	adds	r7, #20
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
 8004378:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004386:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	021a      	lsls	r2, r3, #8
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	431a      	orrs	r2, r3
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	4313      	orrs	r3, r2
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	4313      	orrs	r3, r2
 8004398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	609a      	str	r2, [r3, #8]
}
 80043a0:	bf00      	nop
 80043a2:	371c      	adds	r7, #28
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d101      	bne.n	80043c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043c0:	2302      	movs	r3, #2
 80043c2:	e05a      	b.n	800447a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a21      	ldr	r2, [pc, #132]	@ (8004488 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d022      	beq.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004410:	d01d      	beq.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a1d      	ldr	r2, [pc, #116]	@ (800448c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d018      	beq.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a1b      	ldr	r2, [pc, #108]	@ (8004490 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d013      	beq.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a1a      	ldr	r2, [pc, #104]	@ (8004494 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d00e      	beq.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a18      	ldr	r2, [pc, #96]	@ (8004498 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d009      	beq.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a17      	ldr	r2, [pc, #92]	@ (800449c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d004      	beq.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a15      	ldr	r2, [pc, #84]	@ (80044a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d10c      	bne.n	8004468 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004454:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	4313      	orrs	r3, r2
 800445e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	40010000 	.word	0x40010000
 800448c:	40000400 	.word	0x40000400
 8004490:	40000800 	.word	0x40000800
 8004494:	40000c00 	.word	0x40000c00
 8004498:	40010400 	.word	0x40010400
 800449c:	40014000 	.word	0x40014000
 80044a0:	40001800 	.word	0x40001800

080044a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e042      	b.n	8004564 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d106      	bne.n	80044f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7fc fcee 	bl	8000ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2224      	movs	r2, #36	@ 0x24
 80044fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800450e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 fc85 	bl	8004e20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	691a      	ldr	r2, [r3, #16]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004524:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	695a      	ldr	r2, [r3, #20]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004534:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68da      	ldr	r2, [r3, #12]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004544:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2220      	movs	r2, #32
 8004550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2220      	movs	r2, #32
 8004558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b0ba      	sub	sp, #232	@ 0xe8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004592:	2300      	movs	r3, #0
 8004594:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004598:	2300      	movs	r3, #0
 800459a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800459e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80045aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10f      	bne.n	80045d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045b6:	f003 0320 	and.w	r3, r3, #32
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d009      	beq.n	80045d2 <HAL_UART_IRQHandler+0x66>
 80045be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045c2:	f003 0320 	and.w	r3, r3, #32
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 fb69 	bl	8004ca2 <UART_Receive_IT>
      return;
 80045d0:	e25b      	b.n	8004a8a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80045d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f000 80de 	beq.w	8004798 <HAL_UART_IRQHandler+0x22c>
 80045dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d106      	bne.n	80045f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045ec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 80d1 	beq.w	8004798 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00b      	beq.n	800461a <HAL_UART_IRQHandler+0xae>
 8004602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800460a:	2b00      	cmp	r3, #0
 800460c:	d005      	beq.n	800461a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004612:	f043 0201 	orr.w	r2, r3, #1
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800461a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800461e:	f003 0304 	and.w	r3, r3, #4
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00b      	beq.n	800463e <HAL_UART_IRQHandler+0xd2>
 8004626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b00      	cmp	r3, #0
 8004630:	d005      	beq.n	800463e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004636:	f043 0202 	orr.w	r2, r3, #2
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800463e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00b      	beq.n	8004662 <HAL_UART_IRQHandler+0xf6>
 800464a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d005      	beq.n	8004662 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800465a:	f043 0204 	orr.w	r2, r3, #4
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004666:	f003 0308 	and.w	r3, r3, #8
 800466a:	2b00      	cmp	r3, #0
 800466c:	d011      	beq.n	8004692 <HAL_UART_IRQHandler+0x126>
 800466e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004672:	f003 0320 	and.w	r3, r3, #32
 8004676:	2b00      	cmp	r3, #0
 8004678:	d105      	bne.n	8004686 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800467a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d005      	beq.n	8004692 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800468a:	f043 0208 	orr.w	r2, r3, #8
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 81f2 	beq.w	8004a80 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800469c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046a0:	f003 0320 	and.w	r3, r3, #32
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d008      	beq.n	80046ba <HAL_UART_IRQHandler+0x14e>
 80046a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046ac:	f003 0320 	and.w	r3, r3, #32
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 faf4 	bl	8004ca2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046c4:	2b40      	cmp	r3, #64	@ 0x40
 80046c6:	bf0c      	ite	eq
 80046c8:	2301      	moveq	r3, #1
 80046ca:	2300      	movne	r3, #0
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d103      	bne.n	80046e6 <HAL_UART_IRQHandler+0x17a>
 80046de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d04f      	beq.n	8004786 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f9fc 	bl	8004ae4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046f6:	2b40      	cmp	r3, #64	@ 0x40
 80046f8:	d141      	bne.n	800477e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	3314      	adds	r3, #20
 8004700:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004704:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004708:	e853 3f00 	ldrex	r3, [r3]
 800470c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004710:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004714:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004718:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	3314      	adds	r3, #20
 8004722:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004726:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800472a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004732:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004736:	e841 2300 	strex	r3, r2, [r1]
 800473a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800473e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1d9      	bne.n	80046fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800474a:	2b00      	cmp	r3, #0
 800474c:	d013      	beq.n	8004776 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004752:	4a7e      	ldr	r2, [pc, #504]	@ (800494c <HAL_UART_IRQHandler+0x3e0>)
 8004754:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800475a:	4618      	mov	r0, r3
 800475c:	f7fc ff61 	bl	8001622 <HAL_DMA_Abort_IT>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d016      	beq.n	8004794 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800476a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004770:	4610      	mov	r0, r2
 8004772:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004774:	e00e      	b.n	8004794 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f99e 	bl	8004ab8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800477c:	e00a      	b.n	8004794 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f99a 	bl	8004ab8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004784:	e006      	b.n	8004794 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f996 	bl	8004ab8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004792:	e175      	b.n	8004a80 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004794:	bf00      	nop
    return;
 8004796:	e173      	b.n	8004a80 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800479c:	2b01      	cmp	r3, #1
 800479e:	f040 814f 	bne.w	8004a40 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80047a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047a6:	f003 0310 	and.w	r3, r3, #16
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 8148 	beq.w	8004a40 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80047b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047b4:	f003 0310 	and.w	r3, r3, #16
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 8141 	beq.w	8004a40 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047be:	2300      	movs	r3, #0
 80047c0:	60bb      	str	r3, [r7, #8]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	60bb      	str	r3, [r7, #8]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	60bb      	str	r3, [r7, #8]
 80047d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047de:	2b40      	cmp	r3, #64	@ 0x40
 80047e0:	f040 80b6 	bne.w	8004950 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 8145 	beq.w	8004a84 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80047fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004802:	429a      	cmp	r2, r3
 8004804:	f080 813e 	bcs.w	8004a84 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800480e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800481a:	f000 8088 	beq.w	800492e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	330c      	adds	r3, #12
 8004824:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004828:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800482c:	e853 3f00 	ldrex	r3, [r3]
 8004830:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004834:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004838:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800483c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	330c      	adds	r3, #12
 8004846:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800484a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800484e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004852:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004856:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800485a:	e841 2300 	strex	r3, r2, [r1]
 800485e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004862:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1d9      	bne.n	800481e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3314      	adds	r3, #20
 8004870:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004872:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004874:	e853 3f00 	ldrex	r3, [r3]
 8004878:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800487a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800487c:	f023 0301 	bic.w	r3, r3, #1
 8004880:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3314      	adds	r3, #20
 800488a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800488e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004892:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004894:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004896:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800489a:	e841 2300 	strex	r3, r2, [r1]
 800489e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80048a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1e1      	bne.n	800486a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	3314      	adds	r3, #20
 80048ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048b0:	e853 3f00 	ldrex	r3, [r3]
 80048b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80048b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	3314      	adds	r3, #20
 80048c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80048ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80048cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80048d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80048d2:	e841 2300 	strex	r3, r2, [r1]
 80048d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80048d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1e3      	bne.n	80048a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2220      	movs	r2, #32
 80048e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	330c      	adds	r3, #12
 80048f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048f6:	e853 3f00 	ldrex	r3, [r3]
 80048fa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80048fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048fe:	f023 0310 	bic.w	r3, r3, #16
 8004902:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	330c      	adds	r3, #12
 800490c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004910:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004912:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004914:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004916:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004918:	e841 2300 	strex	r3, r2, [r1]
 800491c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800491e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1e3      	bne.n	80048ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004928:	4618      	mov	r0, r3
 800492a:	f7fc fe0a 	bl	8001542 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2202      	movs	r2, #2
 8004932:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800493c:	b29b      	uxth	r3, r3
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	b29b      	uxth	r3, r3
 8004942:	4619      	mov	r1, r3
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f8c1 	bl	8004acc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800494a:	e09b      	b.n	8004a84 <HAL_UART_IRQHandler+0x518>
 800494c:	08004bab 	.word	0x08004bab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004958:	b29b      	uxth	r3, r3
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004964:	b29b      	uxth	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	f000 808e 	beq.w	8004a88 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800496c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 8089 	beq.w	8004a88 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	330c      	adds	r3, #12
 800497c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004980:	e853 3f00 	ldrex	r3, [r3]
 8004984:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004988:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800498c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	330c      	adds	r3, #12
 8004996:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800499a:	647a      	str	r2, [r7, #68]	@ 0x44
 800499c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80049a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049a2:	e841 2300 	strex	r3, r2, [r1]
 80049a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80049a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1e3      	bne.n	8004976 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3314      	adds	r3, #20
 80049b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b8:	e853 3f00 	ldrex	r3, [r3]
 80049bc:	623b      	str	r3, [r7, #32]
   return(result);
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	f023 0301 	bic.w	r3, r3, #1
 80049c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3314      	adds	r3, #20
 80049ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80049d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80049d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049da:	e841 2300 	strex	r3, r2, [r1]
 80049de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1e3      	bne.n	80049ae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	330c      	adds	r3, #12
 80049fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	e853 3f00 	ldrex	r3, [r3]
 8004a02:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 0310 	bic.w	r3, r3, #16
 8004a0a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	330c      	adds	r3, #12
 8004a14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004a18:	61fa      	str	r2, [r7, #28]
 8004a1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1c:	69b9      	ldr	r1, [r7, #24]
 8004a1e:	69fa      	ldr	r2, [r7, #28]
 8004a20:	e841 2300 	strex	r3, r2, [r1]
 8004a24:	617b      	str	r3, [r7, #20]
   return(result);
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1e3      	bne.n	80049f4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a36:	4619      	mov	r1, r3
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 f847 	bl	8004acc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a3e:	e023      	b.n	8004a88 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d009      	beq.n	8004a60 <HAL_UART_IRQHandler+0x4f4>
 8004a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d003      	beq.n	8004a60 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f8ba 	bl	8004bd2 <UART_Transmit_IT>
    return;
 8004a5e:	e014      	b.n	8004a8a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00e      	beq.n	8004a8a <HAL_UART_IRQHandler+0x51e>
 8004a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d008      	beq.n	8004a8a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f8fa 	bl	8004c72 <UART_EndTransmit_IT>
    return;
 8004a7e:	e004      	b.n	8004a8a <HAL_UART_IRQHandler+0x51e>
    return;
 8004a80:	bf00      	nop
 8004a82:	e002      	b.n	8004a8a <HAL_UART_IRQHandler+0x51e>
      return;
 8004a84:	bf00      	nop
 8004a86:	e000      	b.n	8004a8a <HAL_UART_IRQHandler+0x51e>
      return;
 8004a88:	bf00      	nop
  }
}
 8004a8a:	37e8      	adds	r7, #232	@ 0xe8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b095      	sub	sp, #84	@ 0x54
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	330c      	adds	r3, #12
 8004af2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004af6:	e853 3f00 	ldrex	r3, [r3]
 8004afa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	330c      	adds	r3, #12
 8004b0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b0c:	643a      	str	r2, [r7, #64]	@ 0x40
 8004b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b14:	e841 2300 	strex	r3, r2, [r1]
 8004b18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1e5      	bne.n	8004aec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	3314      	adds	r3, #20
 8004b26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b28:	6a3b      	ldr	r3, [r7, #32]
 8004b2a:	e853 3f00 	ldrex	r3, [r3]
 8004b2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	f023 0301 	bic.w	r3, r3, #1
 8004b36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	3314      	adds	r3, #20
 8004b3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b48:	e841 2300 	strex	r3, r2, [r1]
 8004b4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1e5      	bne.n	8004b20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d119      	bne.n	8004b90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	330c      	adds	r3, #12
 8004b62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	e853 3f00 	ldrex	r3, [r3]
 8004b6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	f023 0310 	bic.w	r3, r3, #16
 8004b72:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	330c      	adds	r3, #12
 8004b7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b7c:	61ba      	str	r2, [r7, #24]
 8004b7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b80:	6979      	ldr	r1, [r7, #20]
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	e841 2300 	strex	r3, r2, [r1]
 8004b88:	613b      	str	r3, [r7, #16]
   return(result);
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1e5      	bne.n	8004b5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2220      	movs	r2, #32
 8004b94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b9e:	bf00      	nop
 8004ba0:	3754      	adds	r7, #84	@ 0x54
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b084      	sub	sp, #16
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f7ff ff77 	bl	8004ab8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bca:	bf00      	nop
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b085      	sub	sp, #20
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b21      	cmp	r3, #33	@ 0x21
 8004be4:	d13e      	bne.n	8004c64 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bee:	d114      	bne.n	8004c1a <UART_Transmit_IT+0x48>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d110      	bne.n	8004c1a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	881b      	ldrh	r3, [r3, #0]
 8004c02:	461a      	mov	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c0c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	1c9a      	adds	r2, r3, #2
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	621a      	str	r2, [r3, #32]
 8004c18:	e008      	b.n	8004c2c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	1c59      	adds	r1, r3, #1
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6211      	str	r1, [r2, #32]
 8004c24:	781a      	ldrb	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	3b01      	subs	r3, #1
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	4619      	mov	r1, r3
 8004c3a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10f      	bne.n	8004c60 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c4e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c5e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	e000      	b.n	8004c66 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c64:	2302      	movs	r3, #2
  }
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b082      	sub	sp, #8
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68da      	ldr	r2, [r3, #12]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c88:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7ff fefc 	bl	8004a90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b08c      	sub	sp, #48	@ 0x30
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b22      	cmp	r3, #34	@ 0x22
 8004cb4:	f040 80ae 	bne.w	8004e14 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cc0:	d117      	bne.n	8004cf2 <UART_Receive_IT+0x50>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d113      	bne.n	8004cf2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cea:	1c9a      	adds	r2, r3, #2
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	629a      	str	r2, [r3, #40]	@ 0x28
 8004cf0:	e026      	b.n	8004d40 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d04:	d007      	beq.n	8004d16 <UART_Receive_IT+0x74>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10a      	bne.n	8004d24 <UART_Receive_IT+0x82>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d106      	bne.n	8004d24 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d20:	701a      	strb	r2, [r3, #0]
 8004d22:	e008      	b.n	8004d36 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d34:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d3a:	1c5a      	adds	r2, r3, #1
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	3b01      	subs	r3, #1
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d15d      	bne.n	8004e10 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68da      	ldr	r2, [r3, #12]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0220 	bic.w	r2, r2, #32
 8004d62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68da      	ldr	r2, [r3, #12]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	695a      	ldr	r2, [r3, #20]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 0201 	bic.w	r2, r2, #1
 8004d82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2220      	movs	r2, #32
 8004d88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d135      	bne.n	8004e06 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	330c      	adds	r3, #12
 8004da6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	e853 3f00 	ldrex	r3, [r3]
 8004dae:	613b      	str	r3, [r7, #16]
   return(result);
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	f023 0310 	bic.w	r3, r3, #16
 8004db6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	330c      	adds	r3, #12
 8004dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dc0:	623a      	str	r2, [r7, #32]
 8004dc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc4:	69f9      	ldr	r1, [r7, #28]
 8004dc6:	6a3a      	ldr	r2, [r7, #32]
 8004dc8:	e841 2300 	strex	r3, r2, [r1]
 8004dcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1e5      	bne.n	8004da0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0310 	and.w	r3, r3, #16
 8004dde:	2b10      	cmp	r3, #16
 8004de0:	d10a      	bne.n	8004df8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004de2:	2300      	movs	r3, #0
 8004de4:	60fb      	str	r3, [r7, #12]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	60fb      	str	r3, [r7, #12]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	60fb      	str	r3, [r7, #12]
 8004df6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7ff fe64 	bl	8004acc <HAL_UARTEx_RxEventCallback>
 8004e04:	e002      	b.n	8004e0c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7ff fe4c 	bl	8004aa4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	e002      	b.n	8004e16 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004e10:	2300      	movs	r3, #0
 8004e12:	e000      	b.n	8004e16 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004e14:	2302      	movs	r3, #2
  }
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3730      	adds	r7, #48	@ 0x30
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
	...

08004e20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e24:	b0c0      	sub	sp, #256	@ 0x100
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e3c:	68d9      	ldr	r1, [r3, #12]
 8004e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	ea40 0301 	orr.w	r3, r0, r1
 8004e48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	431a      	orrs	r2, r3
 8004e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004e78:	f021 010c 	bic.w	r1, r1, #12
 8004e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e86:	430b      	orrs	r3, r1
 8004e88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e9a:	6999      	ldr	r1, [r3, #24]
 8004e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	ea40 0301 	orr.w	r3, r0, r1
 8004ea6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	4b8f      	ldr	r3, [pc, #572]	@ (80050ec <UART_SetConfig+0x2cc>)
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d005      	beq.n	8004ec0 <UART_SetConfig+0xa0>
 8004eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	4b8d      	ldr	r3, [pc, #564]	@ (80050f0 <UART_SetConfig+0x2d0>)
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d104      	bne.n	8004eca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ec0:	f7fe fc5a 	bl	8003778 <HAL_RCC_GetPCLK2Freq>
 8004ec4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004ec8:	e003      	b.n	8004ed2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004eca:	f7fe fc41 	bl	8003750 <HAL_RCC_GetPCLK1Freq>
 8004ece:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed6:	69db      	ldr	r3, [r3, #28]
 8004ed8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004edc:	f040 810c 	bne.w	80050f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ee0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004eea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004eee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004ef2:	4622      	mov	r2, r4
 8004ef4:	462b      	mov	r3, r5
 8004ef6:	1891      	adds	r1, r2, r2
 8004ef8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004efa:	415b      	adcs	r3, r3
 8004efc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004efe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004f02:	4621      	mov	r1, r4
 8004f04:	eb12 0801 	adds.w	r8, r2, r1
 8004f08:	4629      	mov	r1, r5
 8004f0a:	eb43 0901 	adc.w	r9, r3, r1
 8004f0e:	f04f 0200 	mov.w	r2, #0
 8004f12:	f04f 0300 	mov.w	r3, #0
 8004f16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f22:	4690      	mov	r8, r2
 8004f24:	4699      	mov	r9, r3
 8004f26:	4623      	mov	r3, r4
 8004f28:	eb18 0303 	adds.w	r3, r8, r3
 8004f2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004f30:	462b      	mov	r3, r5
 8004f32:	eb49 0303 	adc.w	r3, r9, r3
 8004f36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f46:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004f4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f4e:	460b      	mov	r3, r1
 8004f50:	18db      	adds	r3, r3, r3
 8004f52:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f54:	4613      	mov	r3, r2
 8004f56:	eb42 0303 	adc.w	r3, r2, r3
 8004f5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004f60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004f64:	f7fb f942 	bl	80001ec <__aeabi_uldivmod>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	4b61      	ldr	r3, [pc, #388]	@ (80050f4 <UART_SetConfig+0x2d4>)
 8004f6e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f72:	095b      	lsrs	r3, r3, #5
 8004f74:	011c      	lsls	r4, r3, #4
 8004f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f80:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004f84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004f88:	4642      	mov	r2, r8
 8004f8a:	464b      	mov	r3, r9
 8004f8c:	1891      	adds	r1, r2, r2
 8004f8e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004f90:	415b      	adcs	r3, r3
 8004f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f98:	4641      	mov	r1, r8
 8004f9a:	eb12 0a01 	adds.w	sl, r2, r1
 8004f9e:	4649      	mov	r1, r9
 8004fa0:	eb43 0b01 	adc.w	fp, r3, r1
 8004fa4:	f04f 0200 	mov.w	r2, #0
 8004fa8:	f04f 0300 	mov.w	r3, #0
 8004fac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004fb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fb8:	4692      	mov	sl, r2
 8004fba:	469b      	mov	fp, r3
 8004fbc:	4643      	mov	r3, r8
 8004fbe:	eb1a 0303 	adds.w	r3, sl, r3
 8004fc2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004fc6:	464b      	mov	r3, r9
 8004fc8:	eb4b 0303 	adc.w	r3, fp, r3
 8004fcc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004fdc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004fe0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	18db      	adds	r3, r3, r3
 8004fe8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fea:	4613      	mov	r3, r2
 8004fec:	eb42 0303 	adc.w	r3, r2, r3
 8004ff0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ff2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004ff6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004ffa:	f7fb f8f7 	bl	80001ec <__aeabi_uldivmod>
 8004ffe:	4602      	mov	r2, r0
 8005000:	460b      	mov	r3, r1
 8005002:	4611      	mov	r1, r2
 8005004:	4b3b      	ldr	r3, [pc, #236]	@ (80050f4 <UART_SetConfig+0x2d4>)
 8005006:	fba3 2301 	umull	r2, r3, r3, r1
 800500a:	095b      	lsrs	r3, r3, #5
 800500c:	2264      	movs	r2, #100	@ 0x64
 800500e:	fb02 f303 	mul.w	r3, r2, r3
 8005012:	1acb      	subs	r3, r1, r3
 8005014:	00db      	lsls	r3, r3, #3
 8005016:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800501a:	4b36      	ldr	r3, [pc, #216]	@ (80050f4 <UART_SetConfig+0x2d4>)
 800501c:	fba3 2302 	umull	r2, r3, r3, r2
 8005020:	095b      	lsrs	r3, r3, #5
 8005022:	005b      	lsls	r3, r3, #1
 8005024:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005028:	441c      	add	r4, r3
 800502a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800502e:	2200      	movs	r2, #0
 8005030:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005034:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005038:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800503c:	4642      	mov	r2, r8
 800503e:	464b      	mov	r3, r9
 8005040:	1891      	adds	r1, r2, r2
 8005042:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005044:	415b      	adcs	r3, r3
 8005046:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005048:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800504c:	4641      	mov	r1, r8
 800504e:	1851      	adds	r1, r2, r1
 8005050:	6339      	str	r1, [r7, #48]	@ 0x30
 8005052:	4649      	mov	r1, r9
 8005054:	414b      	adcs	r3, r1
 8005056:	637b      	str	r3, [r7, #52]	@ 0x34
 8005058:	f04f 0200 	mov.w	r2, #0
 800505c:	f04f 0300 	mov.w	r3, #0
 8005060:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005064:	4659      	mov	r1, fp
 8005066:	00cb      	lsls	r3, r1, #3
 8005068:	4651      	mov	r1, sl
 800506a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800506e:	4651      	mov	r1, sl
 8005070:	00ca      	lsls	r2, r1, #3
 8005072:	4610      	mov	r0, r2
 8005074:	4619      	mov	r1, r3
 8005076:	4603      	mov	r3, r0
 8005078:	4642      	mov	r2, r8
 800507a:	189b      	adds	r3, r3, r2
 800507c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005080:	464b      	mov	r3, r9
 8005082:	460a      	mov	r2, r1
 8005084:	eb42 0303 	adc.w	r3, r2, r3
 8005088:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800508c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005098:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800509c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80050a0:	460b      	mov	r3, r1
 80050a2:	18db      	adds	r3, r3, r3
 80050a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050a6:	4613      	mov	r3, r2
 80050a8:	eb42 0303 	adc.w	r3, r2, r3
 80050ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80050b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80050b6:	f7fb f899 	bl	80001ec <__aeabi_uldivmod>
 80050ba:	4602      	mov	r2, r0
 80050bc:	460b      	mov	r3, r1
 80050be:	4b0d      	ldr	r3, [pc, #52]	@ (80050f4 <UART_SetConfig+0x2d4>)
 80050c0:	fba3 1302 	umull	r1, r3, r3, r2
 80050c4:	095b      	lsrs	r3, r3, #5
 80050c6:	2164      	movs	r1, #100	@ 0x64
 80050c8:	fb01 f303 	mul.w	r3, r1, r3
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	3332      	adds	r3, #50	@ 0x32
 80050d2:	4a08      	ldr	r2, [pc, #32]	@ (80050f4 <UART_SetConfig+0x2d4>)
 80050d4:	fba2 2303 	umull	r2, r3, r2, r3
 80050d8:	095b      	lsrs	r3, r3, #5
 80050da:	f003 0207 	and.w	r2, r3, #7
 80050de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4422      	add	r2, r4
 80050e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80050e8:	e106      	b.n	80052f8 <UART_SetConfig+0x4d8>
 80050ea:	bf00      	nop
 80050ec:	40011000 	.word	0x40011000
 80050f0:	40011400 	.word	0x40011400
 80050f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050fc:	2200      	movs	r2, #0
 80050fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005102:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005106:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800510a:	4642      	mov	r2, r8
 800510c:	464b      	mov	r3, r9
 800510e:	1891      	adds	r1, r2, r2
 8005110:	6239      	str	r1, [r7, #32]
 8005112:	415b      	adcs	r3, r3
 8005114:	627b      	str	r3, [r7, #36]	@ 0x24
 8005116:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800511a:	4641      	mov	r1, r8
 800511c:	1854      	adds	r4, r2, r1
 800511e:	4649      	mov	r1, r9
 8005120:	eb43 0501 	adc.w	r5, r3, r1
 8005124:	f04f 0200 	mov.w	r2, #0
 8005128:	f04f 0300 	mov.w	r3, #0
 800512c:	00eb      	lsls	r3, r5, #3
 800512e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005132:	00e2      	lsls	r2, r4, #3
 8005134:	4614      	mov	r4, r2
 8005136:	461d      	mov	r5, r3
 8005138:	4643      	mov	r3, r8
 800513a:	18e3      	adds	r3, r4, r3
 800513c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005140:	464b      	mov	r3, r9
 8005142:	eb45 0303 	adc.w	r3, r5, r3
 8005146:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800514a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005156:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800515a:	f04f 0200 	mov.w	r2, #0
 800515e:	f04f 0300 	mov.w	r3, #0
 8005162:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005166:	4629      	mov	r1, r5
 8005168:	008b      	lsls	r3, r1, #2
 800516a:	4621      	mov	r1, r4
 800516c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005170:	4621      	mov	r1, r4
 8005172:	008a      	lsls	r2, r1, #2
 8005174:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005178:	f7fb f838 	bl	80001ec <__aeabi_uldivmod>
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	4b60      	ldr	r3, [pc, #384]	@ (8005304 <UART_SetConfig+0x4e4>)
 8005182:	fba3 2302 	umull	r2, r3, r3, r2
 8005186:	095b      	lsrs	r3, r3, #5
 8005188:	011c      	lsls	r4, r3, #4
 800518a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800518e:	2200      	movs	r2, #0
 8005190:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005194:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005198:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800519c:	4642      	mov	r2, r8
 800519e:	464b      	mov	r3, r9
 80051a0:	1891      	adds	r1, r2, r2
 80051a2:	61b9      	str	r1, [r7, #24]
 80051a4:	415b      	adcs	r3, r3
 80051a6:	61fb      	str	r3, [r7, #28]
 80051a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051ac:	4641      	mov	r1, r8
 80051ae:	1851      	adds	r1, r2, r1
 80051b0:	6139      	str	r1, [r7, #16]
 80051b2:	4649      	mov	r1, r9
 80051b4:	414b      	adcs	r3, r1
 80051b6:	617b      	str	r3, [r7, #20]
 80051b8:	f04f 0200 	mov.w	r2, #0
 80051bc:	f04f 0300 	mov.w	r3, #0
 80051c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051c4:	4659      	mov	r1, fp
 80051c6:	00cb      	lsls	r3, r1, #3
 80051c8:	4651      	mov	r1, sl
 80051ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051ce:	4651      	mov	r1, sl
 80051d0:	00ca      	lsls	r2, r1, #3
 80051d2:	4610      	mov	r0, r2
 80051d4:	4619      	mov	r1, r3
 80051d6:	4603      	mov	r3, r0
 80051d8:	4642      	mov	r2, r8
 80051da:	189b      	adds	r3, r3, r2
 80051dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80051e0:	464b      	mov	r3, r9
 80051e2:	460a      	mov	r2, r1
 80051e4:	eb42 0303 	adc.w	r3, r2, r3
 80051e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80051ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80051f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80051f8:	f04f 0200 	mov.w	r2, #0
 80051fc:	f04f 0300 	mov.w	r3, #0
 8005200:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005204:	4649      	mov	r1, r9
 8005206:	008b      	lsls	r3, r1, #2
 8005208:	4641      	mov	r1, r8
 800520a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800520e:	4641      	mov	r1, r8
 8005210:	008a      	lsls	r2, r1, #2
 8005212:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005216:	f7fa ffe9 	bl	80001ec <__aeabi_uldivmod>
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	4611      	mov	r1, r2
 8005220:	4b38      	ldr	r3, [pc, #224]	@ (8005304 <UART_SetConfig+0x4e4>)
 8005222:	fba3 2301 	umull	r2, r3, r3, r1
 8005226:	095b      	lsrs	r3, r3, #5
 8005228:	2264      	movs	r2, #100	@ 0x64
 800522a:	fb02 f303 	mul.w	r3, r2, r3
 800522e:	1acb      	subs	r3, r1, r3
 8005230:	011b      	lsls	r3, r3, #4
 8005232:	3332      	adds	r3, #50	@ 0x32
 8005234:	4a33      	ldr	r2, [pc, #204]	@ (8005304 <UART_SetConfig+0x4e4>)
 8005236:	fba2 2303 	umull	r2, r3, r2, r3
 800523a:	095b      	lsrs	r3, r3, #5
 800523c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005240:	441c      	add	r4, r3
 8005242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005246:	2200      	movs	r2, #0
 8005248:	673b      	str	r3, [r7, #112]	@ 0x70
 800524a:	677a      	str	r2, [r7, #116]	@ 0x74
 800524c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005250:	4642      	mov	r2, r8
 8005252:	464b      	mov	r3, r9
 8005254:	1891      	adds	r1, r2, r2
 8005256:	60b9      	str	r1, [r7, #8]
 8005258:	415b      	adcs	r3, r3
 800525a:	60fb      	str	r3, [r7, #12]
 800525c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005260:	4641      	mov	r1, r8
 8005262:	1851      	adds	r1, r2, r1
 8005264:	6039      	str	r1, [r7, #0]
 8005266:	4649      	mov	r1, r9
 8005268:	414b      	adcs	r3, r1
 800526a:	607b      	str	r3, [r7, #4]
 800526c:	f04f 0200 	mov.w	r2, #0
 8005270:	f04f 0300 	mov.w	r3, #0
 8005274:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005278:	4659      	mov	r1, fp
 800527a:	00cb      	lsls	r3, r1, #3
 800527c:	4651      	mov	r1, sl
 800527e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005282:	4651      	mov	r1, sl
 8005284:	00ca      	lsls	r2, r1, #3
 8005286:	4610      	mov	r0, r2
 8005288:	4619      	mov	r1, r3
 800528a:	4603      	mov	r3, r0
 800528c:	4642      	mov	r2, r8
 800528e:	189b      	adds	r3, r3, r2
 8005290:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005292:	464b      	mov	r3, r9
 8005294:	460a      	mov	r2, r1
 8005296:	eb42 0303 	adc.w	r3, r2, r3
 800529a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800529c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80052a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80052a8:	f04f 0200 	mov.w	r2, #0
 80052ac:	f04f 0300 	mov.w	r3, #0
 80052b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80052b4:	4649      	mov	r1, r9
 80052b6:	008b      	lsls	r3, r1, #2
 80052b8:	4641      	mov	r1, r8
 80052ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052be:	4641      	mov	r1, r8
 80052c0:	008a      	lsls	r2, r1, #2
 80052c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80052c6:	f7fa ff91 	bl	80001ec <__aeabi_uldivmod>
 80052ca:	4602      	mov	r2, r0
 80052cc:	460b      	mov	r3, r1
 80052ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005304 <UART_SetConfig+0x4e4>)
 80052d0:	fba3 1302 	umull	r1, r3, r3, r2
 80052d4:	095b      	lsrs	r3, r3, #5
 80052d6:	2164      	movs	r1, #100	@ 0x64
 80052d8:	fb01 f303 	mul.w	r3, r1, r3
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	011b      	lsls	r3, r3, #4
 80052e0:	3332      	adds	r3, #50	@ 0x32
 80052e2:	4a08      	ldr	r2, [pc, #32]	@ (8005304 <UART_SetConfig+0x4e4>)
 80052e4:	fba2 2303 	umull	r2, r3, r2, r3
 80052e8:	095b      	lsrs	r3, r3, #5
 80052ea:	f003 020f 	and.w	r2, r3, #15
 80052ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4422      	add	r2, r4
 80052f6:	609a      	str	r2, [r3, #8]
}
 80052f8:	bf00      	nop
 80052fa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80052fe:	46bd      	mov	sp, r7
 8005300:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005304:	51eb851f 	.word	0x51eb851f

08005308 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005308:	b084      	sub	sp, #16
 800530a:	b580      	push	{r7, lr}
 800530c:	b084      	sub	sp, #16
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
 8005312:	f107 001c 	add.w	r0, r7, #28
 8005316:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800531a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800531e:	2b01      	cmp	r3, #1
 8005320:	d123      	bne.n	800536a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005326:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005336:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800534a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800534e:	2b01      	cmp	r3, #1
 8005350:	d105      	bne.n	800535e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 faa0 	bl	80058a4 <USB_CoreReset>
 8005364:	4603      	mov	r3, r0
 8005366:	73fb      	strb	r3, [r7, #15]
 8005368:	e01b      	b.n	80053a2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 fa94 	bl	80058a4 <USB_CoreReset>
 800537c:	4603      	mov	r3, r0
 800537e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005380:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005384:	2b00      	cmp	r3, #0
 8005386:	d106      	bne.n	8005396 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800538c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	639a      	str	r2, [r3, #56]	@ 0x38
 8005394:	e005      	b.n	80053a2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800539a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80053a2:	7fbb      	ldrb	r3, [r7, #30]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d10b      	bne.n	80053c0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f043 0206 	orr.w	r2, r3, #6
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f043 0220 	orr.w	r2, r3, #32
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80053c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053cc:	b004      	add	sp, #16
 80053ce:	4770      	bx	lr

080053d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f023 0201 	bic.w	r2, r3, #1
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr

080053f2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b084      	sub	sp, #16
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
 80053fa:	460b      	mov	r3, r1
 80053fc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80053fe:	2300      	movs	r3, #0
 8005400:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800540e:	78fb      	ldrb	r3, [r7, #3]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d115      	bne.n	8005440 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005420:	200a      	movs	r0, #10
 8005422:	f7fb ff59 	bl	80012d8 <HAL_Delay>
      ms += 10U;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	330a      	adds	r3, #10
 800542a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 fa2b 	bl	8005888 <USB_GetMode>
 8005432:	4603      	mov	r3, r0
 8005434:	2b01      	cmp	r3, #1
 8005436:	d01e      	beq.n	8005476 <USB_SetCurrentMode+0x84>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2bc7      	cmp	r3, #199	@ 0xc7
 800543c:	d9f0      	bls.n	8005420 <USB_SetCurrentMode+0x2e>
 800543e:	e01a      	b.n	8005476 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005440:	78fb      	ldrb	r3, [r7, #3]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d115      	bne.n	8005472 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005452:	200a      	movs	r0, #10
 8005454:	f7fb ff40 	bl	80012d8 <HAL_Delay>
      ms += 10U;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	330a      	adds	r3, #10
 800545c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 fa12 	bl	8005888 <USB_GetMode>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d005      	beq.n	8005476 <USB_SetCurrentMode+0x84>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2bc7      	cmp	r3, #199	@ 0xc7
 800546e:	d9f0      	bls.n	8005452 <USB_SetCurrentMode+0x60>
 8005470:	e001      	b.n	8005476 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e005      	b.n	8005482 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2bc8      	cmp	r3, #200	@ 0xc8
 800547a:	d101      	bne.n	8005480 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e000      	b.n	8005482 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
	...

0800548c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800548c:	b084      	sub	sp, #16
 800548e:	b580      	push	{r7, lr}
 8005490:	b086      	sub	sp, #24
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
 8005496:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800549a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800549e:	2300      	movs	r3, #0
 80054a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80054a6:	2300      	movs	r3, #0
 80054a8:	613b      	str	r3, [r7, #16]
 80054aa:	e009      	b.n	80054c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	3340      	adds	r3, #64	@ 0x40
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	2200      	movs	r2, #0
 80054b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	3301      	adds	r3, #1
 80054be:	613b      	str	r3, [r7, #16]
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	2b0e      	cmp	r3, #14
 80054c4:	d9f2      	bls.n	80054ac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80054c6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d11c      	bne.n	8005508 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054dc:	f043 0302 	orr.w	r3, r3, #2
 80054e0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054fe:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	639a      	str	r2, [r3, #56]	@ 0x38
 8005506:	e00b      	b.n	8005520 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800550c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005518:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005526:	461a      	mov	r2, r3
 8005528:	2300      	movs	r3, #0
 800552a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800552c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005530:	2b01      	cmp	r3, #1
 8005532:	d10d      	bne.n	8005550 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005534:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005538:	2b00      	cmp	r3, #0
 800553a:	d104      	bne.n	8005546 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800553c:	2100      	movs	r1, #0
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f968 	bl	8005814 <USB_SetDevSpeed>
 8005544:	e008      	b.n	8005558 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005546:	2101      	movs	r1, #1
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 f963 	bl	8005814 <USB_SetDevSpeed>
 800554e:	e003      	b.n	8005558 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005550:	2103      	movs	r1, #3
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f95e 	bl	8005814 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005558:	2110      	movs	r1, #16
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f8fa 	bl	8005754 <USB_FlushTxFifo>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f924 	bl	80057b8 <USB_FlushRxFifo>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005580:	461a      	mov	r2, r3
 8005582:	2300      	movs	r3, #0
 8005584:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800558c:	461a      	mov	r2, r3
 800558e:	2300      	movs	r3, #0
 8005590:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005598:	461a      	mov	r2, r3
 800559a:	2300      	movs	r3, #0
 800559c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800559e:	2300      	movs	r3, #0
 80055a0:	613b      	str	r3, [r7, #16]
 80055a2:	e043      	b.n	800562c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055ba:	d118      	bne.n	80055ee <USB_DevInit+0x162>
    {
      if (i == 0U)
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10a      	bne.n	80055d8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	015a      	lsls	r2, r3, #5
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	4413      	add	r3, r2
 80055ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055ce:	461a      	mov	r2, r3
 80055d0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80055d4:	6013      	str	r3, [r2, #0]
 80055d6:	e013      	b.n	8005600 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055e4:	461a      	mov	r2, r3
 80055e6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80055ea:	6013      	str	r3, [r2, #0]
 80055ec:	e008      	b.n	8005600 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	015a      	lsls	r2, r3, #5
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	4413      	add	r3, r2
 80055f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055fa:	461a      	mov	r2, r3
 80055fc:	2300      	movs	r3, #0
 80055fe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	4413      	add	r3, r2
 8005608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800560c:	461a      	mov	r2, r3
 800560e:	2300      	movs	r3, #0
 8005610:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	4413      	add	r3, r2
 800561a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800561e:	461a      	mov	r2, r3
 8005620:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005624:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	3301      	adds	r3, #1
 800562a:	613b      	str	r3, [r7, #16]
 800562c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005630:	461a      	mov	r2, r3
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	4293      	cmp	r3, r2
 8005636:	d3b5      	bcc.n	80055a4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005638:	2300      	movs	r3, #0
 800563a:	613b      	str	r3, [r7, #16]
 800563c:	e043      	b.n	80056c6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	015a      	lsls	r2, r3, #5
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	4413      	add	r3, r2
 8005646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005650:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005654:	d118      	bne.n	8005688 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10a      	bne.n	8005672 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	015a      	lsls	r2, r3, #5
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4413      	add	r3, r2
 8005664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005668:	461a      	mov	r2, r3
 800566a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800566e:	6013      	str	r3, [r2, #0]
 8005670:	e013      	b.n	800569a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	4413      	add	r3, r2
 800567a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800567e:	461a      	mov	r2, r3
 8005680:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005684:	6013      	str	r3, [r2, #0]
 8005686:	e008      	b.n	800569a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4413      	add	r3, r2
 8005690:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005694:	461a      	mov	r2, r3
 8005696:	2300      	movs	r3, #0
 8005698:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	015a      	lsls	r2, r3, #5
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056a6:	461a      	mov	r2, r3
 80056a8:	2300      	movs	r3, #0
 80056aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056b8:	461a      	mov	r2, r3
 80056ba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80056be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	3301      	adds	r3, #1
 80056c4:	613b      	str	r3, [r7, #16]
 80056c6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80056ca:	461a      	mov	r2, r3
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d3b5      	bcc.n	800563e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056e4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80056f2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80056f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d105      	bne.n	8005708 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	f043 0210 	orr.w	r2, r3, #16
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	699a      	ldr	r2, [r3, #24]
 800570c:	4b10      	ldr	r3, [pc, #64]	@ (8005750 <USB_DevInit+0x2c4>)
 800570e:	4313      	orrs	r3, r2
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005714:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005718:	2b00      	cmp	r3, #0
 800571a:	d005      	beq.n	8005728 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	f043 0208 	orr.w	r2, r3, #8
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005728:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800572c:	2b01      	cmp	r3, #1
 800572e:	d107      	bne.n	8005740 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005738:	f043 0304 	orr.w	r3, r3, #4
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005740:	7dfb      	ldrb	r3, [r7, #23]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3718      	adds	r7, #24
 8005746:	46bd      	mov	sp, r7
 8005748:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800574c:	b004      	add	sp, #16
 800574e:	4770      	bx	lr
 8005750:	803c3800 	.word	0x803c3800

08005754 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800575e:	2300      	movs	r3, #0
 8005760:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	3301      	adds	r3, #1
 8005766:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800576e:	d901      	bls.n	8005774 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e01b      	b.n	80057ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	2b00      	cmp	r3, #0
 800577a:	daf2      	bge.n	8005762 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	019b      	lsls	r3, r3, #6
 8005784:	f043 0220 	orr.w	r2, r3, #32
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	3301      	adds	r3, #1
 8005790:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005798:	d901      	bls.n	800579e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e006      	b.n	80057ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	f003 0320 	and.w	r3, r3, #32
 80057a6:	2b20      	cmp	r3, #32
 80057a8:	d0f0      	beq.n	800578c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057c0:	2300      	movs	r3, #0
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	3301      	adds	r3, #1
 80057c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057d0:	d901      	bls.n	80057d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e018      	b.n	8005808 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	daf2      	bge.n	80057c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80057de:	2300      	movs	r3, #0
 80057e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2210      	movs	r2, #16
 80057e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	3301      	adds	r3, #1
 80057ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057f4:	d901      	bls.n	80057fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e006      	b.n	8005808 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	f003 0310 	and.w	r3, r3, #16
 8005802:	2b10      	cmp	r3, #16
 8005804:	d0f0      	beq.n	80057e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	460b      	mov	r3, r1
 800581e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	78fb      	ldrb	r3, [r7, #3]
 800582e:	68f9      	ldr	r1, [r7, #12]
 8005830:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005834:	4313      	orrs	r3, r2
 8005836:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005846:	b480      	push	{r7}
 8005848:	b085      	sub	sp, #20
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005860:	f023 0303 	bic.w	r3, r3, #3
 8005864:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005874:	f043 0302 	orr.w	r3, r3, #2
 8005878:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3714      	adds	r7, #20
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	f003 0301 	and.w	r3, r3, #1
}
 8005898:	4618      	mov	r0, r3
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058ac:	2300      	movs	r3, #0
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	3301      	adds	r3, #1
 80058b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058bc:	d901      	bls.n	80058c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e01b      	b.n	80058fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	daf2      	bge.n	80058b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80058ca:	2300      	movs	r3, #0
 80058cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	f043 0201 	orr.w	r2, r3, #1
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	3301      	adds	r3, #1
 80058de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058e6:	d901      	bls.n	80058ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e006      	b.n	80058fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d0f0      	beq.n	80058da <USB_CoreReset+0x36>

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3714      	adds	r7, #20
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <memset>:
 8005906:	4402      	add	r2, r0
 8005908:	4603      	mov	r3, r0
 800590a:	4293      	cmp	r3, r2
 800590c:	d100      	bne.n	8005910 <memset+0xa>
 800590e:	4770      	bx	lr
 8005910:	f803 1b01 	strb.w	r1, [r3], #1
 8005914:	e7f9      	b.n	800590a <memset+0x4>
	...

08005918 <__libc_init_array>:
 8005918:	b570      	push	{r4, r5, r6, lr}
 800591a:	4d0d      	ldr	r5, [pc, #52]	@ (8005950 <__libc_init_array+0x38>)
 800591c:	4c0d      	ldr	r4, [pc, #52]	@ (8005954 <__libc_init_array+0x3c>)
 800591e:	1b64      	subs	r4, r4, r5
 8005920:	10a4      	asrs	r4, r4, #2
 8005922:	2600      	movs	r6, #0
 8005924:	42a6      	cmp	r6, r4
 8005926:	d109      	bne.n	800593c <__libc_init_array+0x24>
 8005928:	4d0b      	ldr	r5, [pc, #44]	@ (8005958 <__libc_init_array+0x40>)
 800592a:	4c0c      	ldr	r4, [pc, #48]	@ (800595c <__libc_init_array+0x44>)
 800592c:	f000 f818 	bl	8005960 <_init>
 8005930:	1b64      	subs	r4, r4, r5
 8005932:	10a4      	asrs	r4, r4, #2
 8005934:	2600      	movs	r6, #0
 8005936:	42a6      	cmp	r6, r4
 8005938:	d105      	bne.n	8005946 <__libc_init_array+0x2e>
 800593a:	bd70      	pop	{r4, r5, r6, pc}
 800593c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005940:	4798      	blx	r3
 8005942:	3601      	adds	r6, #1
 8005944:	e7ee      	b.n	8005924 <__libc_init_array+0xc>
 8005946:	f855 3b04 	ldr.w	r3, [r5], #4
 800594a:	4798      	blx	r3
 800594c:	3601      	adds	r6, #1
 800594e:	e7f2      	b.n	8005936 <__libc_init_array+0x1e>
 8005950:	08005998 	.word	0x08005998
 8005954:	08005998 	.word	0x08005998
 8005958:	08005998 	.word	0x08005998
 800595c:	0800599c 	.word	0x0800599c

08005960 <_init>:
 8005960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005962:	bf00      	nop
 8005964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005966:	bc08      	pop	{r3}
 8005968:	469e      	mov	lr, r3
 800596a:	4770      	bx	lr

0800596c <_fini>:
 800596c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800596e:	bf00      	nop
 8005970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005972:	bc08      	pop	{r3}
 8005974:	469e      	mov	lr, r3
 8005976:	4770      	bx	lr
